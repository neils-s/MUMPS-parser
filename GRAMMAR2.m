GRAMMER2
    ; Copyright (C) 2013 Neils Schoenfelder
    ; 
    ; This program is free software; you can redistribute it and/or
    ; modify it under the terms of the GNU General Public License
    ; as published by the Free Software Foundation; either version 2
    ; of the License, or (at your option) any later version.
    ; 
    ; This program is distributed in the hope that it will be useful,
    ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ; GNU General Public License for more details.
    ; 
    ; You should have received a copy of the GNU General Public License
    ; along with this program; if not, write to the Free Software
    ; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
    ; 
    ; 
    d tester() q  ; Put in a hook that will redirect to the tester
    ;
    ;
    ; =====  OVERVIEW  ====
    ; This routine holds a grammer for MUMPS that is intended to be easily parsed for static analysis.
    ; This grammer can be used with the code in the ^PARSER1 routine to parse MUMPS code.
    ; It consists of several tags to load elements of the grammer into a specified array.
    ;
    ; =====  Data loaders  ====
    ;
    ; This tag load the basic single-character identifiers into the specified array.
    ; These characters only include the basic ASCII character set (up to character 127)
    ; Parameters:
    ;   array - an array (pass by reference) that will hold the grammer
loadChars(array)
    ; These tokens aren't part of the MUMPS annotated standard
    ; They sure make things easier, though...
    s array("bang")="literal"
    s array("bang","value")="!"
    s array("doubleQuote")="literal"
    s array("doubleQuote","value")=""""
    s array("hash")="literal"
    s array("hash","value")="#"
    s array("dollarSign")="literal"
    s array("dollarSign","value")="$"
    s array("percent")="literal"
    s array("percent","value")="%"
    s array("ampersand")="literal"
    s array("ampersand","value")="&"
    s array("singleQuote")="literal"
    s array("singleQuote","value")="'"
    s array("openParen")="literal"
    s array("openParen","value")="("
    s array("closeParen")="literal"
    s array("closeParen","value")=")"
    s array("asterisk")="literal"
    s array("asterisk","value")="*"
    s array("plus")="literal"
    s array("plus","value")="+"
    s array("comma")="literal"
    s array("comma","value")=","
    s array("minus")="literal"
    s array("minus","value")="-"
    s array("period")="literal"
    s array("period","value")="."
    s array("forwardSlash")="literal"
    s array("forwardSlash","value")="/"
    s array("colon")="literal"
    s array("colon","value")=":"
    s array("semicolon")="literal"
    s array("semicolon","value")=";"
    s array("lessThan")="literal"
    s array("lessThan","value")="<"
    s array("greaterThan")="literal"
    s array("greaterThan","value")=">"
    s array("equals")="literal"
    s array("equals","value")="="
    s array("questionMark")="literal"
    s array("questionMark","value")="?"
    s array("atSign")="literal"
    s array("atSign","value")="@"
    s array("openBracket")="literal"
    s array("openBracket","value")="["
    s array("closeBracket")="literal"
    s array("closeBracket","value")="]"
    s array("backSlash")="literal"
    s array("backSlash","value")=$c(92) ; \
    s array("caret")="literal"
    s array("caret","value")="^"
    s array("underscore")="literal"
    s array("underscore","value")="_"
    s array("graveAccent")="literal" ; this isn't actually used in MUMPS
    s array("graveAccent","value")="`"
    s array("openBrace")="literal"
    s array("openBrace","value")="{"
    s array("closeBrace")="literal"
    s array("closeBrace","value")="}"
    s array("pipe")="literal"
    s array("pipe","value")="|"
    s array("tilde")="literal"
    s array("tilde","value")="~"
    ;
    ; These tokens are all part of the standard
    s array("SP")="literal"
    s array("SP","value")=" "
    ;
    s array("LF")="literal"
    s array("LF","value")=$c(10)
    ;
    s array("FF")="literal"
    s array("FF","value")=$c(12)
    ;
    s array("CR")="literal"
    s array("CR","value")=$c(13)
    ;
    s array("eol")="subtreeChain"
    s array("eol",1)="token"
    s array("eol",1,"value")="CR"
    s array("eol",2)="token"
    s array("eol",2,"value")="LF"
    ;
    s array("eor")="subtreeChain"
    s array("eor",1)="token"
    s array("eor",1,"value")="CR"
    s array("eor",2)="token"
    s array("eor",2,"value")="FF"
    ;
    s array("control")="option"
    s array("control",1)="literal"
    s array("control",1,"value")=$c(1)
    s array("control",2)="literal"
    s array("control",2,"value")=$c(2)
    s array("control",3)="literal"
    s array("control",3,"value")=$c(3)
    s array("control",4)="literal"
    s array("control",4,"value")=$c(4)
    s array("control",5)="literal"
    s array("control",5,"value")=$c(5)
    s array("control",6)="literal"
    s array("control",6,"value")=$c(6)
    s array("control",7)="literal"
    s array("control",7,"value")=$c(7)
    s array("control",8)="literal"
    s array("control",8,"value")=$c(8)
    s array("control",9)="literal"
    s array("control",9,"value")=$c(9)
    s array("control",10)="token"
    s array("control",10,"value")="LF"
    s array("control",11)="literal"
    s array("control",11,"value")=$c(11)
    s array("control",12)="token"
    s array("control",12,"value")="FF"
    s array("control",13)="token"
    s array("control",13,"value")="CR"
    s array("control",14)="literal"
    s array("control",14,"value")=$c(14)
    s array("control",15)="literal"
    s array("control",15,"value")=$c(15)
    s array("control",16)="literal"
    s array("control",16,"value")=$c(16)
    s array("control",17)="literal"
    s array("control",17,"value")=$c(17)
    s array("control",18)="literal"
    s array("control",18,"value")=$c(18)
    s array("control",19)="literal"
    s array("control",19,"value")=$c(19)
    s array("control",20)="literal"
    s array("control",20,"value")=$c(20)
    s array("control",21)="literal"
    s array("control",21,"value")=$c(21)
    s array("control",22)="literal"
    s array("control",22,"value")=$c(22)
    s array("control",23)="literal"
    s array("control",23,"value")=$c(23)
    s array("control",24)="literal"
    s array("control",24,"value")=$c(24)
    s array("control",25)="literal"
    s array("control",25,"value")=$c(25)
    s array("control",26)="literal"
    s array("control",26,"value")=$c(26)
    s array("control",27)="literal"
    s array("control",27,"value")=$c(27)
    s array("control",28)="literal"
    s array("control",28,"value")=$c(28)
    s array("control",29)="literal"
    s array("control",29,"value")=$c(29)
    s array("control",30)="literal"
    s array("control",30,"value")=$c(30)
    s array("control",31)="literal"
    s array("control",31,"value")=$c(31)
    s array("control",32)="literal"
    s array("control",32,"value")=$c(127)
    s array("control",33)="literal"
    s array("control",33,"value")=$c(0)
    ;
    s array("ident")="options" ; A-Z and a-z
    s array("ident",1)="literal"
    s array("ident",1,"value")="A"
    s array("ident",2)="literal"
    s array("ident",2,"value")="B"
    s array("ident",3)="literal"
    s array("ident",3,"value")="C"
    s array("ident",4)="literal"
    s array("ident",4,"value")="D"
    s array("ident",5)="literal"
    s array("ident",5,"value")="E"
    s array("ident",6)="literal"
    s array("ident",6,"value")="F"
    s array("ident",7)="literal"
    s array("ident",7,"value")="G"
    s array("ident",8)="literal"
    s array("ident",8,"value")="H"
    s array("ident",9)="literal"
    s array("ident",9,"value")="I"
    s array("ident",10)="literal"
    s array("ident",10,"value")="J"
    s array("ident",11)="literal"
    s array("ident",11,"value")="K"
    s array("ident",12)="literal"
    s array("ident",12,"value")="L"
    s array("ident",13)="literal"
    s array("ident",13,"value")="M"
    s array("ident",14)="literal"
    s array("ident",14,"value")="N"
    s array("ident",15)="literal"
    s array("ident",15,"value")="O"
    s array("ident",16)="literal"
    s array("ident",16,"value")="P"
    s array("ident",17)="literal"
    s array("ident",17,"value")="Q"
    s array("ident",18)="literal"
    s array("ident",18,"value")="R"
    s array("ident",19)="literal"
    s array("ident",19,"value")="S"
    s array("ident",20)="literal"
    s array("ident",20,"value")="T"
    s array("ident",21)="literal"
    s array("ident",21,"value")="U"
    s array("ident",22)="literal"
    s array("ident",22,"value")="V"
    s array("ident",23)="literal"
    s array("ident",23,"value")="W"
    s array("ident",24)="literal"
    s array("ident",24,"value")="X"
    s array("ident",25)="literal"
    s array("ident",25,"value")="Y"
    s array("ident",26)="literal"
    s array("ident",26,"value")="Z"
    s array("ident",27)="literal"
    s array("ident",27,"value")="a"
    s array("ident",28)="literal"
    s array("ident",28,"value")="b"
    s array("ident",29)="literal"
    s array("ident",29,"value")="c"
    s array("ident",30)="literal"
    s array("ident",30,"value")="d"
    s array("ident",31)="literal"
    s array("ident",31,"value")="e"
    s array("ident",32)="literal"
    s array("ident",32,"value")="f"
    s array("ident",33)="literal"
    s array("ident",33,"value")="g"
    s array("ident",34)="literal"
    s array("ident",34,"value")="h"
    s array("ident",35)="literal"
    s array("ident",35,"value")="i"
    s array("ident",36)="literal"
    s array("ident",36,"value")="j"
    s array("ident",37)="literal"
    s array("ident",37,"value")="k"
    s array("ident",38)="literal"
    s array("ident",38,"value")="l"
    s array("ident",39)="literal"
    s array("ident",39,"value")="m"
    s array("ident",40)="literal"
    s array("ident",40,"value")="n"
    s array("ident",41)="literal"
    s array("ident",41,"value")="o"
    s array("ident",42)="literal"
    s array("ident",42,"value")="p"
    s array("ident",43)="literal"
    s array("ident",43,"value")="q"
    s array("ident",44)="literal"
    s array("ident",44,"value")="r"
    s array("ident",45)="literal"
    s array("ident",45,"value")="s"
    s array("ident",46)="literal"
    s array("ident",46,"value")="t"
    s array("ident",47)="literal"
    s array("ident",47,"value")="u"
    s array("ident",48)="literal"
    s array("ident",48,"value")="v"
    s array("ident",49)="literal"
    s array("ident",49,"value")="w"
    s array("ident",50)="literal"
    s array("ident",50,"value")="x"
    s array("ident",51)="literal"
    s array("ident",51,"value")="y"
    s array("ident",52)="literal"
    s array("ident",52,"value")="z"
    ;
    s array("digit")="options" ; 0-9
    s array("digit",1)="literal"
    s array("digit",1,"value")="1"
    s array("digit",2)="literal"
    s array("digit",2,"value")="2"
    s array("digit",3)="literal"
    s array("digit",3,"value")="3"
    s array("digit",4)="literal"
    s array("digit",4,"value")="4"
    s array("digit",5)="literal"
    s array("digit",5,"value")="5"
    s array("digit",6)="literal"
    s array("digit",6,"value")="6"
    s array("digit",7)="literal"
    s array("digit",7,"value")="7"
    s array("digit",8)="literal"
    s array("digit",8,"value")="8"
    s array("digit",9)="literal"
    s array("digit",9,"value")="9"
    s array("digit",10)="literal"
    s array("digit",10,"value")="0"
    ;
    s array("nonquote")="options" ; all of the characters in 'graphic' except the doubleQuote
    s array("nonquote",1)="token"
    s array("nonquote",1,"value")="SP"
    s array("nonquote",2)="token"
    s array("nonquote",2,"value")="bang"
    s array("nonquote",3)="token"
    s array("nonquote",3,"value")="hash"
    s array("nonquote",4)="token"
    s array("nonquote",4,"value")="dollarSign"
    s array("nonquote",5)="token"
    s array("nonquote",5,"value")="percent"
    s array("nonquote",6)="token"
    s array("nonquote",6,"value")="ampersand"
    s array("nonquote",7)="token"
    s array("nonquote",7,"value")="singleQuote"
    s array("nonquote",8)="token"
    s array("nonquote",8,"value")="openParen"
    s array("nonquote",9)="token"
    s array("nonquote",9,"value")="tilde"
    s array("nonquote",10)="token"
    s array("nonquote",10,"value")="closeParen"
    s array("nonquote",11)="token"
    s array("nonquote",11,"value")="asterisk"
    s array("nonquote",12)="token"
    s array("nonquote",12,"value")="plus"
    s array("nonquote",13)="token"
    s array("nonquote",13,"value")="comma"
    s array("nonquote",14)="token"
    s array("nonquote",14,"value")="minus"
    s array("nonquote",15)="token"
    s array("nonquote",15,"value")="period"
    s array("nonquote",16)="token"
    s array("nonquote",16,"value")="forwardSlash"
    s array("nonquote",17)="token"
    s array("nonquote",17,"value")="digit" ; 0-9
    s array("nonquote",18)="token"
    s array("nonquote",18,"value")="colon"
    s array("nonquote",19)="token"
    s array("nonquote",19,"value")="semicolon"
    s array("nonquote",20)="token"
    s array("nonquote",20,"value")="lessThan"
    s array("nonquote",21)="token"
    s array("nonquote",21,"value")="equals"
    s array("nonquote",22)="token"
    s array("nonquote",22,"value")="greaterThan"
    s array("nonquote",23)="token"
    s array("nonquote",23,"value")="questionMark"
    s array("nonquote",24)="token"
    s array("nonquote",24,"value")="atSign"
    s array("nonquote",25)="token"
    s array("nonquote",25,"value")="ident" ; A-Z, a-z
    s array("nonquote",26)="token"
    s array("nonquote",26,"value")="openBracket"
    s array("nonquote",27)="token"
    s array("nonquote",27,"value")="closeBracket"
    s array("nonquote",28)="token"
    s array("nonquote",28,"value")="backSlash"
    s array("nonquote",29)="token"
    s array("nonquote",29,"value")="caret"
    s array("nonquote",30)="token"
    s array("nonquote",30,"value")="underscore"
    s array("nonquote",31)="token"
    s array("nonquote",31,"value")="graveAccent"
    s array("nonquote",32)="token"
    s array("nonquote",32,"value")="openBrace"
    s array("nonquote",33)="token"
    s array("nonquote",33,"value")="closeBrace"
    s array("nonquote",34)="token"
    s array("nonquote",34,"value")="pipe"
    ;
    s array("graphic")="options"
    s array("graphic",1)="token"
    s array("graphic",1,"value")="doubleQuote"
    s array("graphic",2)="token"
    s array("graphic",2,"value")="nonquote"
    ;
    q 1
    ;
    ;
loadStrings(array)
    s array("strlit")="subtreeChain"
    s array("strlit","force")="noStore" ; Don't bother storing the children of this parse tree
    s array("strlit",1)="token"
    s array("strlit",1,"value")="doubleQuote"
    s array("strlit",2)="delimList"
    s array("strlit",2,"content")=""
    s array("strlit",2,"delimiter")="options"
    s array("strlit",2,"delimiter",1)="token"
    s array("strlit",2,"delimiter",1,"value")="nonquote"
    s array("strlit",2,"delimiter",2)="subtreeChain"
    s array("strlit",2,"delimiter",2,1)="token"
    s array("strlit",2,"delimiter",2,1,"value")="doubleQuote"
    s array("strlit",2,"delimiter",2,2)="token"
    s array("strlit",2,"delimiter",2,2,"value")="doubleQuote"
    s array("strlit",3)="token"
    s array("strlit",3,"value")="doubleQuote"
    ;
    q 1
    ;
    ;
    ; This loads numbers into the grammar array
loadNumbers(array)
    s array("intlit")="delimList"
    s array("intlit","content")="token"
    s array("intlit","content","value")="digit"
    s array("intlit","delimiter")=""
    ;
    s array("mant")="options"
    s array("mant",1)="subtreeChain"
    s array("mant",1,1)="token"
    s array("mant",1,1,"value")="intlit"
    s array("mant",1,2)="options"
    s array("mant",1,2,1)=""
    s array("mant",1,2,2)="subtreeChain"
    s array("mant",1,2,2,1)="token"
    s array("mant",1,2,2,1,"value")="period"
    s array("mant",1,2,2,2)="token"
    s array("mant",1,2,2,2,"value")="intlit"
    s array("mant",2)="subtreeChain"
    s array("mant",2,1)="token"
    s array("mant",2,1,"value")="period"
    s array("mant",2,2)="token"
    s array("mant",2,2,"value")="intlit"
    ;
    s array("exp")="subtreeChain"
    s array("exp",1)="literal"
    s array("exp",1,"value")="E"
    s array("exp",2)="options"
    s array("exp",2,1)=""
    s array("exp",2,2)="token"
    s array("exp",2,2,"value")="plus"
    s array("exp",2,3)="token"
    s array("exp",2,3,"value")="minus"
    s array("exp",3)="token"
    s array("exp",3,"value")="intlit"
    ;
    s array("numlit")="subtreeChain"
    s array("numlit","force")="noStore"
    s array("numlit",1)="token"
    s array("numlit",1,"value")="mant"
    s array("numlit",2)="options"
    s array("numlit",2,1)=""
    s array("numlit",2,2)="token"
    s array("numlit",2,2,"value")="exp"
    ;
    q 1
    ;
    ;
loadVariables(array)
    s array("environment")="token"
    s array("environment","value")="expr"
    ;
    s array("variableSubscript")="token"
    s array("variableSubscript","value")="expr"
    ;
    s array("nakedGlobalRef")="subtreeChain"
    s array("nakedGlobalRef",1)="token"
    s array("nakedGlobalRef",1,"value")="caret"
    s array("nakedGlobalRef",2)="token"
    s array("nakedGlobalRef",2,"value")="openParen"
    s array("nakedGlobalRef",3)="delimList"
    s array("nakedGlobalRef",3,"delimiter")="token"
    s array("nakedGlobalRef",3,"delimiter","value")="comma"
    s array("nakedGlobalRef",3,"content")="token"
    s array("nakedGlobalRef",3,"content","value")="expr"
    s array("nakedGlobalRef",4)="token"
    s array("nakedGlobalRef",4,"value")="closeParen"
    ;
    s array("explicitGlobalRef")="subtreeChain"
    s array("explicitGlobalRef",1)="token"
    s array("explicitGlobalRef",1,"value")="caret"
    s array("explicitGlobalRef",2)="options"
    s array("explicitGlobalRef",2,1)=""
    s array("explicitGlobalRef",2,2)="subtreeChain"
    s array("explicitGlobalRef",2,2,1)="token"
    s array("explicitGlobalRef",2,2,1,"value")="pipe"
    s array("explicitGlobalRef",2,2,2)="token"
    s array("explicitGlobalRef",2,2,2,"value")="environment"
    s array("explicitGlobalRef",2,2,3)="token"
    s array("explicitGlobalRef",2,2,3,"value")="pipe"
    s array("explicitGlobalRef",3)="token"
    s array("explicitGlobalRef",3,"value")="name"
    s array("explicitGlobalRef",4)="options"
    s array("explicitGlobalRef",4,1)=""
    s array("explicitGlobalRef",4,2)="subtreeChain"
    s array("explicitGlobalRef",4,2,1)="token"
    s array("explicitGlobalRef",4,2,1,"value")="openParen"
    s array("explicitGlobalRef",4,2,2)="delimList"
    s array("explicitGlobalRef",4,2,2,"delimiter")="token"
    s array("explicitGlobalRef",4,2,2,"delimiter","value")="comma"
    s array("explicitGlobalRef",4,2,2,"content")="token"
    s array("explicitGlobalRef",4,2,2,"content","value")="variableSubscript"
    s array("explicitGlobalRef",4,2,3)="token"
    s array("explicitGlobalRef",4,2,3,"value")="closeParen"
    ;
    s array("indirectVarName")="token"
    s array("indirectVarName","value")="expratom"
    ;
    s array("indirectVariableRef")="subtreeChain"
    s array("indirectVariableRef",1)="token"
    s array("indirectVariableRef",1,"value")="atSign"
    s array("indirectVariableRef",2)="token"
    s array("indirectVariableRef",2,"value")="indirectVarName"
    s array("indirectVariableRef",3)="token"
    s array("indirectVariableRef",3,"value")="atSign"
    s array("indirectVariableRef",4)="token"
    s array("indirectVariableRef",4,"value")="openParen"
    s array("indirectVariableRef",5)="delimList"
    s array("indirectVariableRef",5,"delimiter")="token"
    s array("indirectVariableRef",5,"delimiter","value")="comma"
    s array("indirectVariableRef",5,"content")="token"
    s array("indirectVariableRef",5,"content","value")="variableSubscript"
    s array("indirectVariableRef",6)="token"
    s array("indirectVariableRef",6,"value")="closeParen"
    ;
    s array("indirection")="subtreeChain"
    s array("indirection",1)="token"
    s array("indirection",1,"value")="atSign"
    s array("indirection",2)="token"
    s array("indirection",2,"value")="expratom"
    ;
    s array("gvn")="options"
    s array("gvn",1)="token"
    s array("gvn",1,"value")="nakedGlobalRef"
    s array("gvn",2)="token"
    s array("gvn",2,"value")="explicitGlobalRef"
    s array("gvn",3)="token"
    s array("gvn",3,"value")="indirectVariableRef"
    s array("gvn",4)="token"
    s array("gvn",4,"value")="indirection"
    ;
    s array("explicitLocalRef")="subtreeChain"
    s array("explicitLocalRef",1)="token"
    s array("explicitLocalRef",1,"value")="name"
    s array("explicitLocalRef",2)="options"
    s array("explicitLocalRef",2,1)=""
    s array("explicitLocalRef",2,2)="subtreeChain"
    s array("explicitLocalRef",2,2,1)="token"
    s array("explicitLocalRef",2,2,1,"value")="openParen"
    s array("explicitLocalRef",2,2,2)="delimList"
    s array("explicitLocalRef",2,2,2,"delimiter")="token"
    s array("explicitLocalRef",2,2,2,"delimiter","value")="comma"
    s array("explicitLocalRef",2,2,2,"content")="token"
    s array("explicitLocalRef",2,2,2,"content","value")="variableSubscript"
    s array("explicitLocalRef",2,2,3)="token"
    s array("explicitLocalRef",2,2,3,"value")="closeParen"
    ;
    s array("lvn")="options" ; We need to separate "lvn" from "glvn" to handle the FOR command
    s array("lvn",1)="token"
    s array("lvn",1,"value")="explicitLocalRef"
    s array("lvn",2)="token"
    s array("lvn",2,"value")="indirectVariableRef"
    s array("lvn",3)="token"
    s array("lvn",3,"value")="indirection"
    ;
    s array("charsetexpr")="token"
    s array("charsetexpr","value")="expr"
    ;
    s array("characterSSVN")="subtreeChain"
    s array("characterSSVN",1)="literal"
    s array("characterSSVN",1,"value")="^$"
    s array("characterSSVN",2)="options"
    s array("characterSSVN",2,"force")="forceToLowerCase"
    s array("characterSSVN",2,1)="literal"
    s array("characterSSVN",2,1,"value")="c"
    s array("characterSSVN",2,2)="literal"
    s array("characterSSVN",2,2,"value")="character"
    s array("characterSSVN",3)="token"
    s array("characterSSVN",3,"value")="openParen"
    s array("characterSSVN",4)="token"
    s array("characterSSVN",4,"value")="charsetexpr"
    s array("characterSSVN",5)="token"
    s array("characterSSVN",5,"value")="closeParen"
    ;
    s array("devicexpr")="token"
    s array("devicexpr","value")="expr"
    ;
    s array("deviceSSVN")="subtreeChain"
    s array("deviceSSVN",1)="literal"
    s array("deviceSSVN",1,"value")="^$"
    s array("deviceSSVN",2)="options"
    s array("deviceSSVN",2,"force")="forceToLowerCase"
    s array("deviceSSVN",2,1)="literal"
    s array("deviceSSVN",2,1,"value")="d"
    s array("deviceSSVN",2,2)="literal"
    s array("deviceSSVN",2,2,"value")="device"
    s array("deviceSSVN",3)="token"
    s array("deviceSSVN",3,"value")="openParen"
    s array("deviceSSVN",4)="token"
    s array("deviceSSVN",4,"value")="devicexpr"
    s array("deviceSSVN",5)="token"
    s array("deviceSSVN",5,"value")="closeParen"
    ;
    s array("gvnexpr")="token"
    s array("gvnexpr","value")="expr"
    ;
    s array("globalSSVN")="subtreeChain"
    s array("globalSSVN",1)="literal"
    s array("globalSSVN",1,"value")="^$"
    s array("globalSSVN",2)="options"
    s array("globalSSVN",2,"force")="forceToLowerCase"
    s array("globalSSVN",2,1)="literal"
    s array("globalSSVN",2,1,"value")="g"
    s array("globalSSVN",2,2)="literal"
    s array("globalSSVN",2,2,"value")="global"
    s array("globalSSVN",3)="token"
    s array("globalSSVN",3,"value")="openParen"
    s array("globalSSVN",4)="token"
    s array("globalSSVN",4,"value")="gvnexpr"
    s array("globalSSVN",5)="token"
    s array("globalSSVN",5,"value")="closeParen"
    ;
    s array("processid")="token"
    s array("processid","value")="expr"
    ;
    s array("jobSSVN")="subtreeChain"
    s array("jobSSVN",1)="literal"
    s array("jobSSVN",1,"value")="^$"
    s array("jobSSVN",2)="options"
    s array("jobSSVN",2,"force")="forceToLowerCase"
    s array("jobSSVN",2,1)="literal"
    s array("jobSSVN",2,1,"value")="j"
    s array("jobSSVN",2,2)="literal"
    s array("jobSSVN",2,2,"value")="job"
    s array("jobSSVN",3)="token"
    s array("jobSSVN",3,"value")="openParen"
    s array("jobSSVN",4)="token"
    s array("jobSSVN",4,"value")="processid"
    s array("jobSSVN",5)="token"
    s array("jobSSVN",5,"value")="closeParen"
    ;
    s array("lockSSVN")="subtreeChain"
    s array("lockSSVN",1)="literal"
    s array("lockSSVN",1,"value")="^$"
    s array("lockSSVN",2)="options"
    s array("lockSSVN",2,"force")="forceToLowerCase"
    s array("lockSSVN",2,1)="literal"
    s array("lockSSVN",2,1,"value")="l"
    s array("lockSSVN",2,2)="literal"
    s array("lockSSVN",2,2,"value")="lock"
    s array("lockSSVN",3)="token"
    s array("lockSSVN",3,"value")="openParen"
    s array("lockSSVN",4)="token"
    s array("lockSSVN",4,"value")="expr"
    s array("lockSSVN",5)="token"
    s array("lockSSVN",5,"value")="closeParen"
    ;
    s array("routinexpr")="token"
    s array("routinexpr","value")="expr"
    ;
    s array("routineSSVN")="subtreeChain"
    s array("routineSSVN",1)="literal"
    s array("routineSSVN",1,"value")="^$"
    s array("routineSSVN",2)="options"
    s array("routineSSVN",2,"force")="forceToLowerCase"
    s array("routineSSVN",2,1)="literal"
    s array("routineSSVN",2,1,"value")="r"
    s array("routineSSVN",2,2)="literal"
    s array("routineSSVN",2,2,"value")="routine"
    s array("routineSSVN",3)="token"
    s array("routineSSVN",3,"value")="openParen"
    s array("routineSSVN",4)="token"
    s array("routineSSVN",4,"value")="routinexpr"
    s array("routineSSVN",5)="token"
    s array("routineSSVN",5,"value")="closeParen"
    ;
    s array("systemexpr")="token"
    s array("systemexpr","value")="expr"
    ;
    s array("systemSSVN")="subtreeChain"
    s array("systemSSVN",1)="literal"
    s array("systemSSVN",1,"value")="^$"
    s array("systemSSVN",2)="options"
    s array("systemSSVN",2,"force")="forceToLowerCase"
    s array("systemSSVN",2,1)="literal"
    s array("systemSSVN",2,1,"value")="s"
    s array("systemSSVN",2,2)="literal"
    s array("systemSSVN",2,2,"value")="system"
    s array("systemSSVN",3)="token"
    s array("systemSSVN",3,"value")="openParen"
    s array("systemSSVN",4)="token"
    s array("systemSSVN",4,"value")="systemexpr"
    s array("systemSSVN",5)="token"
    s array("systemSSVN",5,"value")="closeParen"
    ;
    s array("ssvn")="options"
    s array("ssvn",1)="token"
    s array("ssvn",1,"value")="characterSSVN"
    s array("ssvn",2)="token"
    s array("ssvn",2,"value")="deviceSSVN"
    s array("ssvn",3)="token"
    s array("ssvn",3,"value")="globalSSVN"
    s array("ssvn",4)="token"
    s array("ssvn",4,"value")="jobSSVN"
    s array("ssvn",5)="token"
    s array("ssvn",5,"value")="lockSSVN"
    s array("ssvn",6)="token"
    s array("ssvn",6,"value")="routineSSVN"
    s array("ssvn",7)="token"
    s array("ssvn",7,"value")="systemSSVN"
    ;
    s array("glvn")="options"
    s array("glvn",1)="token"
    s array("glvn",1,"value")="lvn"
    s array("glvn",2)="token"
    s array("glvn",2,"value")="gvn"
    s array("glvn",3)="token"
    s array("glvn",3,"value")="ssvn"
    ;
    q 1
    ;
    ;
loadFunctions(array)
    s array("packagename")="token"
    s array("packagename","value")="name"
    ;
    s array("externalroutinename")="subtreeChain"
    s array("externalroutinename",1)="token"
    s array("externalroutinename",1,"value")="name"
    s array("externalroutinename",2)="options"
    s array("externalroutinename",2,1)=""
    s array("externalroutinename",2,2)="subtreeChain"
    s array("externalroutinename",2,2,1)="token"
    s array("externalroutinename",2,2,1,"value")="caret"
    s array("externalroutinename",2,2,2)="token"
    s array("externalroutinename",2,2,2,"value")="name"
    ;
    s array("externref")="subtreeChain"
    s array("externref",1)="token"
    s array("externref",1,"value")="ampersand"
    s array("externref",2)="options"
    s array("externref",2,1)=""
    s array("externref",2,2)="subtreeChain"
    s array("externref",2,2,1)="token"
    s array("externref",2,2,1,"value")="packagename"
    s array("externref",2,2,2)="token"
    s array("externref",2,2,2,"value")="period"
    s array("externref",3)="token"
    s array("externref",3,"value")="externalroutinename"
    ;
    s array("labelref")="options"
    s array("labelref",1)="subtreeChain"
    s array("labelref",1,1)="token"
    s array("labelref",1,1,"value")="caret"
    s array("labelref",1,2)="options"
    s array("labelref",1,2,1)=""
    s array("labelref",1,2,2)="subtreeChain"
    s array("labelref",1,2,2,1)="token"
    s array("labelref",1,2,2,1,"value")="pipe"
    s array("labelref",1,2,2,2)="token"
    s array("labelref",1,2,2,2,"value")="environment"
    s array("labelref",1,2,2,3)="token"
    s array("labelref",1,2,2,3,"value")="pipe"
    s array("labelref",1,3)="token"
    s array("labelref",1,3,"value")="routinename"
    s array("labelref",2)="subtreeChain"
    s array("labelref",2,1)="token"
    s array("labelref",2,1,"value")="label"
    s array("labelref",2,2)="options"
    s array("labelref",2,2,1)=""
    s array("labelref",2,2,2)="subtreeChain"
    s array("labelref",2,2,2,1)="token"
    s array("labelref",2,2,2,1,"value")="caret"
    s array("labelref",2,2,2,2)="options"
    s array("labelref",2,2,2,2,1)=""
    s array("labelref",2,2,2,2,2)="subtreeChain"
    s array("labelref",2,2,2,2,2,1)="token"
    s array("labelref",2,2,2,2,2,1,"value")="pipe"
    s array("labelref",2,2,2,2,2,2)="token"
    s array("labelref",2,2,2,2,2,2,"value")="environment"
    s array("labelref",2,2,2,2,2,3)="token"
    s array("labelref",2,2,2,2,2,3,"value")="pipe"
    s array("labelref",2,2,2,3)="token"
    s array("labelref",2,2,2,3,"value")="routinename"
    ;
    s array("actualname")="options"
    s array("actualname",1)="token"
    s array("actualname",1,"value")="expr"
    s array("actualname",2)="subtreeChain"
    s array("actualname",2,1)="token"
    s array("actualname",2,1,"value")="atSign"
    s array("actualname",2,2)="token"
    s array("actualname",2,2,"value")="expratom"
    ;
    s array("actual")="options"
    s array("actual",1)="token"
    s array("actual",1,"value")="expr"
    s array("actual",2)="subtreeChain"
    s array("actual",2,1)="token"
    s array("actual",2,1,"value")="period"
    s array("actual",2,2)="token"
    s array("actual",2,2,"value")="actualname"
    s array("actual",3)=""
    ;
    s array("actuallist")="subtreeChain"
    s array("actuallist",1)="token"
    s array("actuallist",1,"value")="openParen"
    s array("actuallist",2)="options"
    s array("actuallist",2,1)=""
    s array("actuallist",2,2)="delimList"
    s array("actuallist",2,2,"delimiter")="token"
    s array("actuallist",2,2,"delimiter","value")="comma"
    s array("actuallist",2,2,"content")="token"
    s array("actuallist",2,2,"content","value")="actual"
    s array("actuallist",3)="token"
    s array("actuallist",3,"value")="closeParen"
    ;
    s array("exfunc")="subtreeChain"
    s array("exfunc",1)="token"
    s array("exfunc",1,"value")="dollarSign"
    s array("exfunc",2)="options"
    s array("exfunc",2,1)="token"
    s array("exfunc",2,1,"value")="externref"
    s array("exfunc",2,2)="subtreeChain"
    s array("exfunc",2,2,1)="token"
    s array("exfunc",2,2,1,"value")="dollarSign"
    s array("exfunc",2,2,2)="token"
    s array("exfunc",2,2,2,"value")="labelref"
    s array("exfunc",3)="token"
    s array("exfunc",3,"value")="actuallist"
    ;
    s array("exvar")="subtreeChain"
    s array("exvar",1)="token"
    s array("exvar",1,"value")="dollarSign"
    s array("exvar",2)="options"
    s array("exvar",2,1)="token"
    s array("exvar",2,1,"value")="externref"
    s array("exvar",2,2)="subtreeChain"
    s array("exvar",2,2,1)="token"
    s array("exvar",2,2,1,"value")="dollarSign"
    s array("exvar",2,2,2)="token"
    s array("exvar",2,2,2,"value")="labelref"
    ;
    s array("asciiFunction")="subtreeChain"
    s array("asciiFunction",1)="token"
    s array("asciiFunction",1,"value")="dollarSign"
    s array("asciiFunction",2)="options"
    s array("asciiFunction",2,"force")="forceToLowerCase"
    s array("asciiFunction",2,1)="literal"
    s array("asciiFunction",2,1,"value")="a"
    s array("asciiFunction",2,2)="literal"
    s array("asciiFunction",2,2,"value")="ascii"
    s array("asciiFunction",3)="token"
    s array("asciiFunction",3,"value")="openParen"
    s array("asciiFunction",4)="token"
    s array("asciiFunction",4,"value")="expr"
    s array("asciiFunction",5)="options"
    s array("asciiFunction",5,1)=""
    s array("asciiFunction",5,2)="subtreeChain"
    s array("asciiFunction",5,2,1)="token"
    s array("asciiFunction",5,2,1,"value")="comma"
    s array("asciiFunction",5,2,2)="token"
    s array("asciiFunction",5,2,2,"value")="intexpr"
    s array("asciiFunction",6)="token"
    s array("asciiFunction",6,"value")="closeParen"
    ;
    s array("charFunction")="subtreeChain"
    s array("charFunction",1)="token"
    s array("charFunction",1,"value")="dollarSign"
    s array("charFunction",2)="options"
    s array("charFunction",2,"force")="forceToLowerCase"
    s array("charFunction",2,1)="literal"
    s array("charFunction",2,1,"value")="c"
    s array("charFunction",2,2)="literal"
    s array("charFunction",2,2,"value")="char"
    s array("charFunction",3)="token"
    s array("charFunction",3,"value")="openParen"
    s array("charFunction",4)="delimList"
    s array("charFunction",4,"delimiter")="token"
    s array("charFunction",4,"delimiter","value")="comma"
    s array("charFunction",4,"content")="token"
    s array("charFunction",4,"content","value")="intexpr"
    s array("charFunction",5)="token"
    s array("charFunction",5,"value")="closeParen"
    ;
    s array("dataFunction")="subtreeChain"
    s array("dataFunction",1)="token"
    s array("dataFunction",1,"value")="dollarSign"
    s array("dataFunction",2)="options"
    s array("dataFunction",2,"force")="forceToLowerCase"
    s array("dataFunction",2,1)="literal"
    s array("dataFunction",2,1,"value")="d"
    s array("dataFunction",2,2)="literal"
    s array("dataFunction",2,2,"value")="data"
    s array("dataFunction",3)="token"
    s array("dataFunction",3,"value")="openParen"
    s array("dataFunction",4)="token"
    s array("dataFunction",4,"value")="glvn"
    s array("dataFunction",5)="token"
    s array("dataFunction",5,"value")="closeParen"
    ;
    s array("extractFunction")="subtreeChain"
    s array("extractFunction",1)="token"
    s array("extractFunction",1,"value")="dollarSign"
    s array("extractFunction",2)="options"
    s array("extractFunction",2,"force")="forceToLowerCase"
    s array("extractFunction",2,1)="literal"
    s array("extractFunction",2,1,"value")="e"
    s array("extractFunction",2,2)="literal"
    s array("extractFunction",2,2,"value")="extract"
    s array("extractFunction",3)="token"
    s array("extractFunction",3,"value")="openParen"
    s array("extractFunction",4)="token"
    s array("extractFunction",4,"value")="expr"
    s array("extractFunction",5)="options"
    s array("extractFunction",5,1)=""
    s array("extractFunction",5,2)="subtreeChain"
    s array("extractFunction",5,2,1)="token"
    s array("extractFunction",5,2,1,"value")="comma"
    s array("extractFunction",5,2,2)="token"
    s array("extractFunction",5,2,2,"value")="intexpr"
    s array("extractFunction",5,2,3)="options"
    s array("extractFunction",5,2,3,1)=""
    s array("extractFunction",5,2,3,2)="subtreeChain"
    s array("extractFunction",5,2,3,2,1)="token"
    s array("extractFunction",5,2,3,2,1,"value")="comma"
    s array("extractFunction",5,2,3,2,2)="token"
    s array("extractFunction",5,2,3,2,2,"value")="intexpr"
    s array("extractFunction",6)="token"
    s array("extractFunction",6,"value")="closeParen"   
    ;
    s array("findFunction")="subtreeChain"
    s array("findFunction",1)="token"
    s array("findFunction",1,"value")="dollarSign"
    s array("findFunction",2)="options"
    s array("findFunction",2,"force")="forceToLowerCase"
    s array("findFunction",2,1)="literal"
    s array("findFunction",2,1,"value")="f"
    s array("findFunction",2,2)="literal"
    s array("findFunction",2,2,"value")="find"
    s array("findFunction",3)="token"
    s array("findFunction",3,"value")="openParen"
    s array("findFunction",4)="token"
    s array("findFunction",4,"value")="expr"
    s array("findFunction",5)="token"
    s array("findFunction",5,"value")="comma"
    s array("findFunction",6)="token"
    s array("findFunction",6,"value")="expr"
    s array("findFunction",7)="options"
    s array("findFunction",7,1)=""
    s array("findFunction",7,2)="subtreeChain"
    s array("findFunction",7,2,1)="token"
    s array("findFunction",7,2,1,"value")="comma"
    s array("findFunction",7,2,2)="token"
    s array("findFunction",7,2,2,"value")="intexpr"
    s array("findFunction",8)="token"
    s array("findFunction",8,"value")="closeParen"
    ;
    s array("fncodp")="literal"
    s array("fncodp","force")="forceToLowerCase"
    s array("fncodp","value")="p"
    ;
    s array("fncodt")="literal"
    s array("fncodt","force")="forceToLowerCase"
    s array("fncodt","value")="t"
    ;
    s array("fncodatom")="options"
    s array("fncodatom",1)="token"
    s array("fncodatom",1,"value")="fncodp"
    s array("fncodatom",2)="token"
    s array("fncodatom",2,"value")="fncodt"
    s array("fncodatom",3)="token"
    s array("fncodatom",3,"value")="comma"
    s array("fncodatom",4)="token"
    s array("fncodatom",4,"value")="plus"
    s array("fncodatom",5)="token"
    s array("fncodatom",5,"value")="minus"
    ;
    s array("fncode")="delimList"
    s array("fncode","delimiter")="token"
    s array("fncode","delimiter","value")="fncodatom"
    s array("fncode","content")=""
    ;
    s array("fncodexpr")="token"
    s array("fncodexpr","value")="expr"
    ;
    s array("fnumberFunction")="subtreeChain"
    s array("fnumberFunction",1)="token"
    s array("fnumberFunction",1,"value")="dollarSign"
    s array("fnumberFunction",2)="options"
    s array("fnumberFunction",2,"force")="forceToLowerCase"
    s array("fnumberFunction",2,1)="literal"
    s array("fnumberFunction",2,1,"value")="fn"
    s array("fnumberFunction",2,2)="literal"
    s array("fnumberFunction",2,2,"value")="fnumber"
    s array("fnumberFunction",3)="token"
    s array("fnumberFunction",3,"value")="openParen"
    s array("fnumberFunction",4)="token"
    s array("fnumberFunction",4,"value")="numexpr"
    s array("fnumberFunction",5)="token"
    s array("fnumberFunction",5,"value")="comma"
    s array("fnumberFunction",6)="token"
    s array("fnumberFunction",6,"value")="fncodexpr"
    s array("fnumberFunction",7)="token"
    s array("fnumberFunction",7,"value")="closeParen"
    ;
    s array("getFunction")="subtreeChain"
    s array("getFunction",1)="token"
    s array("getFunction",1,"value")="dollarSign"
    s array("getFunction",2)="options"
    s array("getFunction",2,"force")="forceToLowerCase"
    s array("getFunction",2,1)="literal"
    s array("getFunction",2,1,"value")="g"
    s array("getFunction",2,2)="literal"
    s array("getFunction",2,2,"value")="get"
    s array("getFunction",3)="token"
    s array("getFunction",3,"value")="openParen"
    s array("getFunction",4)="token"
    s array("getFunction",4,"value")="glvn"
    s array("getFunction",5)="token"
    s array("getFunction",5,"value")="closeParen"
    ;
    s array("justifyFunction")="subtreeChain"
    s array("justifyFunction",1)="token"
    s array("justifyFunction",1,"value")="dollarSign"
    s array("justifyFunction",2)="options"
    s array("justifyFunction",2,"force")="forceToLowerCase"
    s array("justifyFunction",2,1)="literal"
    s array("justifyFunction",2,1,"value")="j"
    s array("justifyFunction",2,2)="literal"
    s array("justifyFunction",2,2,"value")="justify"
    s array("justifyFunction",3)="token"
    s array("justifyFunction",3,"value")="openParen"
    s array("justifyFunction",4)="token"
    s array("justifyFunction",4,"value")="expr"
    s array("justifyFunction",5)="token"
    s array("justifyFunction",5,"value")="comma"
    s array("justifyFunction",6)="token"
    s array("justifyFunction",6,"value")="intexpr"
    s array("justifyFunction",7)="options"
    s array("justifyFunction",7,1)=""
    s array("justifyFunction",7,2)="subtreeChain"
    s array("justifyFunction",7,2,1)="token"
    s array("justifyFunction",7,2,1,"value")="comma"
    s array("justifyFunction",7,2,2)="token"
    s array("justifyFunction",7,2,2,"value")="intexpr"
    s array("justifyFunction",8)="token"
    s array("justifyFunction",8,"value")="closeParen"
    ;
    s array("lengthFunction")="subtreeChain"
    s array("lengthFunction",1)="token"
    s array("lengthFunction",1,"value")="dollarSign"
    s array("lengthFunction",2)="options"
    s array("lengthFunction",2,"force")="forceToLowerCase"
    s array("lengthFunction",2,1)="literal"
    s array("lengthFunction",2,1,"value")="l"
    s array("lengthFunction",2,2)="literal"
    s array("lengthFunction",2,2,"value")="length"
    s array("lengthFunction",3)="token"
    s array("lengthFunction",3,"value")="openParen"
    s array("lengthFunction",4)="token"
    s array("lengthFunction",4,"value")="expr"
    s array("lengthFunction",5)="options"
    s array("lengthFunction",5,1)=""
    s array("lengthFunction",5,2)="subtreeChain"
    s array("lengthFunction",5,2,1)="token"
    s array("lengthFunction",5,2,1,"value")="comma"
    s array("lengthFunction",5,2,2)="token"
    s array("lengthFunction",5,2,2,"value")="expr"
    s array("lengthFunction",6)="token"
    s array("lengthFunction",6,"value")="closeParen"
    ;
    s array("nameFunction")="subtreeChain"
    s array("nameFunction",1)="token"
    s array("nameFunction",1,"value")="dollarSign"
    s array("nameFunction",2)="options"
    s array("nameFunction",2,"force")="forceToLowerCase"
    s array("nameFunction",2,1)="literal"
    s array("nameFunction",2,1,"value")="na"
    s array("nameFunction",2,2)="literal"
    s array("nameFunction",2,2,"value")="name"
    s array("nameFunction",3)="token"
    s array("nameFunction",3,"value")="openParen"
    s array("nameFunction",4)="token"
    s array("nameFunction",4,"value")="glvn"
    s array("nameFunction",5)="options"
    s array("nameFunction",5,1)=""
    s array("nameFunction",5,2)="subtreeChain"
    s array("nameFunction",5,2,1)="token"
    s array("nameFunction",5,2,1,"value")="comma"
    s array("nameFunction",5,2,2)="token"
    s array("nameFunction",5,2,2,"value")="intexpr"
    s array("nameFunction",6)="token"
    s array("nameFunction",6,"value")="closeParen"
    ;
    s array("orderFunction")="subtreeChain"
    s array("orderFunction",1)="token"
    s array("orderFunction",1,"value")="dollarSign"
    s array("orderFunction",2)="options"
    s array("orderFunction",2,"force")="forceToLowerCase"
    s array("orderFunction",2,1)="literal"
    s array("orderFunction",2,1,"value")="o"
    s array("orderFunction",2,2)="literal"
    s array("orderFunction",2,2,"value")="order"
    s array("orderFunction",3)="token"
    s array("orderFunction",3,"value")="openParen"
    s array("orderFunction",4)="token"
    s array("orderFunction",4,"value")="glvn"
    s array("orderFunction",5)="options"
    s array("orderFunction",5,1)=""
    s array("orderFunction",5,2)="subtreeChain"
    s array("orderFunction",5,2,1)="token"
    s array("orderFunction",5,2,1,"value")="comma"
    s array("orderFunction",5,2,2)="token"
    s array("orderFunction",5,2,2,"value")="expr"
    s array("orderFunction",6)="token"
    s array("orderFunction",6,"value")="closeParen"
    ;
    s array("pieceFunction")="subtreeChain"
    s array("pieceFunction",1)="token"
    s array("pieceFunction",1,"value")="dollarSign"
    s array("pieceFunction",2)="options"
    s array("pieceFunction",2,"force")="forceToLowerCase"
    s array("pieceFunction",2,1)="literal"
    s array("pieceFunction",2,1,"value")="p"
    s array("pieceFunction",2,2)="literal"
    s array("pieceFunction",2,2,"value")="piece"
    s array("pieceFunction",3)="token"
    s array("pieceFunction",3,"value")="openParen"
    s array("pieceFunction",4)="token"
    s array("pieceFunction",4,"value")="expr"
    s array("pieceFunction",5)="token"
    s array("pieceFunction",5,"value")="comma"
    s array("pieceFunction",6)="token"
    s array("pieceFunction",6,"value")="expr"
    s array("pieceFunction",7)="options"
    s array("pieceFunction",7,1)=""
    s array("pieceFunction",7,2)="subtreeChain"
    s array("pieceFunction",7,2,1)="token"
    s array("pieceFunction",7,2,1,"value")="comma"
    s array("pieceFunction",7,2,2)="token"
    s array("pieceFunction",7,2,2,"value")="intexpr"
    s array("pieceFunction",7,2,3)="options"
    s array("pieceFunction",7,2,3,1)=""
    s array("pieceFunction",7,2,3,2)="subtreeChain"
    s array("pieceFunction",7,2,3,2,1)="token"
    s array("pieceFunction",7,2,3,2,1,"value")="comma"
    s array("pieceFunction",7,2,3,2,2)="token"
    s array("pieceFunction",7,2,3,2,2,"value")="intexpr"
    s array("pieceFunction",8)="token"
    s array("pieceFunction",8,"value")="closeParen"
    ;
    s array("namevalue")="token"
    s array("namevalue","value")="expr"
    ;
    s array("qlengthFunction")="subtreeChain"
    s array("qlengthFunction",1)="token"
    s array("qlengthFunction",1,"value")="dollarSign"
    s array("qlengthFunction",2)="options"
    s array("qlengthFunction",2,"force")="forceToLowerCase"
    s array("qlengthFunction",2,1)="literal"
    s array("qlengthFunction",2,1,"value")="ql"
    s array("qlengthFunction",2,2)="literal"
    s array("qlengthFunction",2,2,"value")="qlength"
    s array("qlengthFunction",3)="token"
    s array("qlengthFunction",3,"value")="openParen"
    s array("qlengthFunction",4)="token"
    s array("qlengthFunction",4,"value")="namevalue"
    s array("qlengthFunction",5)="token"
    s array("qlengthFunction",5,"value")="closeParen"
    ;
    s array("qsubscriptFunction")="subtreeChain"
    s array("qsubscriptFunction",1)="token"
    s array("qsubscriptFunction",1,"value")="dollarSign"
    s array("qsubscriptFunction",2)="options"
    s array("qsubscriptFunction",2,"force")="forceToLowerCase"
    s array("qsubscriptFunction",2,1)="literal"
    s array("qsubscriptFunction",2,1,"value")="qs"
    s array("qsubscriptFunction",2,2)="literal"
    s array("qsubscriptFunction",2,2,"value")="qsubscript"
    s array("qsubscriptFunction",3)="token"
    s array("qsubscriptFunction",3,"value")="openParen"
    s array("qsubscriptFunction",4)="token"
    s array("qsubscriptFunction",4,"value")="namevalue"
    s array("qsubscriptFunction",5)="token"
    s array("qsubscriptFunction",5,"value")="comma"
    s array("qsubscriptFunction",6)="token"
    s array("qsubscriptFunction",6,"value")="intexpr"
    s array("qsubscriptFunction",7)="token"
    s array("qsubscriptFunction",7,"value")="closeParen"
    ;
    s array("queryFunction")="subtreeChain"
    s array("queryFunction",1)="token"
    s array("queryFunction",1,"value")="dollarSign"
    s array("queryFunction",2)="options"
    s array("queryFunction",2,"force")="forceToLowerCase"
    s array("queryFunction",2,1)="literal"
    s array("queryFunction",2,1,"value")="q"
    s array("queryFunction",2,2)="literal"
    s array("queryFunction",2,2,"value")="query"
    s array("queryFunction",3)="token"
    s array("queryFunction",3,"value")="openParen"
    s array("queryFunction",4)="token"
    s array("queryFunction",4,"value")="glvn"
    s array("queryFunction",5)="token"
    s array("queryFunction",5,"value")="closeParen"
    ;
    s array("randomFunction")="subtreeChain"
    s array("randomFunction",1)="token"
    s array("randomFunction",1,"value")="dollarSign"
    s array("randomFunction",2)="options"
    s array("randomFunction",2,"force")="forceToLowerCase"
    s array("randomFunction",2,1)="literal"
    s array("randomFunction",2,1,"value")="r"
    s array("randomFunction",2,2)="literal"
    s array("randomFunction",2,2,"value")="random"
    s array("randomFunction",3)="token"
    s array("randomFunction",3,"value")="openParen"
    s array("randomFunction",4)="token"
    s array("randomFunction",4,"value")="intexpr"
    s array("randomFunction",5)="token"
    s array("randomFunction",5,"value")="closeParen"
    ;
    s array("reverseFunction")="subtreeChain"
    s array("reverseFunction",1)="token"
    s array("reverseFunction",1,"value")="dollarSign"
    s array("reverseFunction",2)="options"
    s array("reverseFunction",2,"force")="forceToLowerCase"
    s array("reverseFunction",2,1)="literal"
    s array("reverseFunction",2,1,"value")="re"
    s array("reverseFunction",2,2)="literal"
    s array("reverseFunction",2,2,"value")="reverse"
    s array("reverseFunction",3)="token"
    s array("reverseFunction",3,"value")="openParen"
    s array("reverseFunction",4)="token"
    s array("reverseFunction",4,"value")="expr"
    s array("reverseFunction",5)="token"
    s array("reverseFunction",5,"value")="closeParen"
    ;
    s array("selectFunction")="subtreeChain"
    s array("selectFunction",1)="token"
    s array("selectFunction",1,"value")="dollarSign"
    s array("selectFunction",2)="options"
    s array("selectFunction",2,"force")="forceToLowerCase"
    s array("selectFunction",2,1)="literal"
    s array("selectFunction",2,1,"value")="s"
    s array("selectFunction",2,2)="literal"
    s array("selectFunction",2,2,"value")="select"
    s array("selectFunction",3)="token"
    s array("selectFunction",3,"value")="openParen"
    s array("selectFunction",4)="delimList"
    s array("selectFunction",4,"delimiter")="token"
    s array("selectFunction",4,"delimiter","value")="comma"
    s array("selectFunction",4,"content")="subtreeChain"
    s array("selectFunction",4,"content",1)="token"
    s array("selectFunction",4,"content",1,"value")="tvexpr"
    s array("selectFunction",4,"content",2)="token"
    s array("selectFunction",4,"content",2,"value")="colon"
    s array("selectFunction",4,"content",3)="token"
    s array("selectFunction",4,"content",3,"value")="expr"
    s array("selectFunction",5)="token"
    s array("selectFunction",5,"value")="closeParen"
    ;
    s array("stackcodexpr")="token"
    s array("stackcodexpr","value")="expr"
    ;
    s array("stackFunction")="subtreeChain"
    s array("stackFunction",1)="token"
    s array("stackFunction",1,"value")="dollarSign"
    s array("stackFunction",2)="options"
    s array("stackFunction",2,"force")="forceToLowerCase"
    s array("stackFunction",2,1)="literal"
    s array("stackFunction",2,1,"value")="st"
    s array("stackFunction",2,2)="literal"
    s array("stackFunction",2,2,"value")="stack"
    s array("stackFunction",3)="token"
    s array("stackFunction",3,"value")="openParen"
    s array("stackFunction",4)="token"
    s array("stackFunction",4,"value")="intexpr"
    s array("stackFunction",5)="options"
    s array("stackFunction",5,1)=""
    s array("stackFunction",5,2)="subtreeChain"
    s array("stackFunction",5,2,1)="token"
    s array("stackFunction",5,2,1,"value")="comma"
    s array("stackFunction",5,2,2)="token"
    s array("stackFunction",5,2,2,"value")="stackcodexpr"
    s array("stackFunction",6)="token"
    s array("stackFunction",6,"value")="closeParen"
    ;
    s array("textarg")="options"
    s array("textarg",1)="subtreeChain"
    s array("textarg",1,1)="token"
    s array("textarg",1,1,"value")="plus"
    s array("textarg",1,2)="token"
    s array("textarg",1,2,"value")="intexpr"
    s array("textarg",1,3)="options"
    s array("textarg",1,3,1)=""
    s array("textarg",1,3,2)="subtreeChain"
    s array("textarg",1,3,2,1)="token"
    s array("textarg",1,3,2,1,"value")="caret"
    s array("textarg",1,3,2,2)="token"
    s array("textarg",1,3,2,2,"value")="routineref"
    s array("textarg",2)="token"
    s array("textarg",2,"value")="entryref"
    s array("textarg",3)="subtreeChain"
    s array("textarg",3,1)="token"
    s array("textarg",3,1,"value")="atSign"
    s array("textarg",3,2)="token"
    s array("textarg",3,2,"value")="expratom"
    ;
    s array("textFunction")="subtreeChain"
    s array("textFunction",1)="token"
    s array("textFunction",1,"value")="dollarSign"
    s array("textFunction",2)="options"
    s array("textFunction",2,"force")="forceToLowerCase"
    s array("textFunction",2,1)="literal"
    s array("textFunction",2,1,"value")="t"
    s array("textFunction",2,2)="literal"
    s array("textFunction",2,2,"value")="text"
    s array("textFunction",3)="token"
    s array("textFunction",3,"value")="openParen"
    s array("textFunction",4)="token"
    s array("textFunction",4,"value")="textarg"
    s array("textFunction",5)="token"
    s array("textFunction",5,"value")="closeParen"  
    ;
    s array("translateFunction")="subtreeChain"
    s array("translateFunction",1)="token"
    s array("translateFunction",1,"value")="dollarSign"
    s array("translateFunction",2)="options"
    s array("translateFunction",2,"force")="forceToLowerCase"
    s array("translateFunction",2,1)="literal"
    s array("translateFunction",2,1,"value")="p"
    s array("translateFunction",2,2)="literal"
    s array("translateFunction",2,2,"value")="piece"
    s array("translateFunction",3)="token"
    s array("translateFunction",3,"value")="openParen"
    s array("translateFunction",4)="token"
    s array("translateFunction",4,"value")="expr"
    s array("translateFunction",5)="token"
    s array("translateFunction",5,"value")="comma"
    s array("translateFunction",6)="token"
    s array("translateFunction",6,"value")="expr"
    s array("translateFunction",7)="options"
    s array("translateFunction",7,1)=""
    s array("translateFunction",7,2)="subtreeChain"
    s array("translateFunction",7,2,1)="token"
    s array("translateFunction",7,2,1,"value")="comma"
    s array("translateFunction",7,2,2)="token"
    s array("translateFunction",7,2,2,"value")="expr"
    s array("translateFunction",8)="token"
    s array("translateFunction",8,"value")="closeParen"
    ;
    s array("viewFunction")="subtreeChain"
    s array("viewFunction",1)="token"
    s array("viewFunction",1,"value")="dollarSign"
    s array("viewFunction",2)="options"
    s array("viewFunction",2,"force")="forceToLowerCase"
    s array("viewFunction",2,1)="literal"
    s array("viewFunction",2,1,"value")="v"
    s array("viewFunction",2,2)="literal"
    s array("viewFunction",2,2,"value")="view"
    s array("viewFunction",3)="token"
    s array("viewFunction",3,"value")="openParen"
    s array("viewFunction",4)="delimList" ; There is no standard for the arguments of $VIEW, so we approximate them with an arbitrary list of expressions
    s array("viewFunction",4,"content")="token"
    s array("viewFunction",4,"content","value")="expr"
    s array("viewFunction",4,"delimiter")="token"
    s array("viewFunction",4,"delimiter","value")="comma"
    s array("viewFunction",5)="token"
    s array("viewFunction",5,"value")="closeParen"
    ;
    s array("function")="options"
    s array("function",1)="token"
    s array("function",1,"value")="asciiFunction"
    s array("function",2)="token"
    s array("function",2,"value")="charFunction"
    s array("function",3)="token"
    s array("function",3,"value")="dataFunction"
    s array("function",4)="token"
    s array("function",4,"value")="extractFunction"
    s array("function",5)="token"
    s array("function",5,"value")="findFunction"
    s array("function",6)="token"
    s array("function",6,"value")="fnumberFunction"
    s array("function",7)="token"
    s array("function",7,"value")="getFunction"
    s array("function",8)="token"
    s array("function",8,"value")="justifyFunction"
    s array("function",9)="token"
    s array("function",9,"value")="lengthFunction"
    s array("function",10)="token"
    s array("function",10,"value")="nameFunction"
    s array("function",11)="token"
    s array("function",11,"value")="orderFunction"
    s array("function",12)="token"
    s array("function",12,"value")="pieceFunction"
    s array("function",13)="token"
    s array("function",13,"value")="qlengthFunction"
    s array("function",14)="token"
    s array("function",14,"value")="qsubscriptFunction"
    s array("function",15)="token"
    s array("function",15,"value")="queryFunction"
    s array("function",16)="token"
    s array("function",16,"value")="randomFunction"
    s array("function",17)="token"
    s array("function",17,"value")="reverseFunction"
    s array("function",18)="token"
    s array("function",18,"value")="selectFunction"
    s array("function",19)="token"
    s array("function",19,"value")="stackFunction"
    s array("function",20)="token"
    s array("function",20,"value")="textFunction"
    s array("function",21)="token"
    s array("function",21,"value")="translateFunction"
    s array("function",22)="token"
    s array("function",22,"value")="viewFunction"
    ;
    s array("deviceSVN")="options"
    s array("deviceSVN","force")="forceToLowerCase"
    s array("deviceSVN",1)="literal"
    s array("deviceSVN",1,"value")="$d"
    s array("deviceSVN",2)="literal"
    s array("deviceSVN",2,"value")="$device"
    ;
    s array("ecodeSVN")="options"
    s array("ecodeSVN","force")="forceToLowerCase"
    s array("ecodeSVN",1)="literal"
    s array("ecodeSVN",1,"value")="$ec"
    s array("ecodeSVN",2)="literal"
    s array("ecodeSVN",2,"value")="$ecode"
    ;
    s array("estackSVN")="options"
    s array("estackSVN","force")="forceToLowerCase"
    s array("estackSVN",1)="literal"
    s array("estackSVN",1,"value")="$es"
    s array("estackSVN",2)="literal"
    s array("estackSVN",2,"value")="$estack"
    ;
    s array("etrapSVN")="options"
    s array("etrapSVN","force")="forceToLowerCase"
    s array("etrapSVN",1)="literal"
    s array("etrapSVN",1,"value")="$et"
    s array("etrapSVN",2)="literal"
    s array("etrapSVN",2,"value")="$etrap"
    ;
    s array("horologSVN")="options"
    s array("horologSVN","force")="forceToLowerCase"
    s array("horologSVN",1)="literal"
    s array("horologSVN",1,"value")="$h"
    s array("horologSVN",2)="literal"
    s array("horologSVN",2,"value")="$horolog"
    ;
    s array("ioSVN")="options"
    s array("ioSVN","force")="forceToLowerCase"
    s array("ioSVN",1)="literal"
    s array("ioSVN",1,"value")="$i"
    s array("ioSVN",2)="literal"
    s array("ioSVN",2,"value")="$io"
    ;
    s array("jobSVN")="options"
    s array("jobSVN","force")="forceToLowerCase"
    s array("jobSVN",1)="literal"
    s array("jobSVN",1,"value")="$j"
    s array("jobSVN",2)="literal"
    s array("jobSVN",2,"value")="$job"
    ;
    s array("keySVN")="options"
    s array("keySVN","force")="forceToLowerCase"
    s array("keySVN",1)="literal"
    s array("keySVN",1,"value")="$k"
    s array("keySVN",2)="literal"
    s array("keySVN",2,"value")="$key"
    ;
    s array("principalSVN")="options"
    s array("principalSVN","force")="forceToLowerCase"
    s array("principalSVN",1)="literal"
    s array("principalSVN",1,"value")="$p"
    s array("principalSVN",2)="literal"
    s array("principalSVN",2,"value")="$principal"
    ;
    s array("quitSVN")="options"
    s array("quitSVN","force")="forceToLowerCase"
    s array("quitSVN",1)="literal"
    s array("quitSVN",1,"value")="$q"
    s array("quitSVN",2)="literal"
    s array("quitSVN",2,"value")="$quit"
    ;
    s array("stackSVN")="options"
    s array("stackSVN","force")="forceToLowerCase"
    s array("stackSVN",1)="literal"
    s array("stackSVN",1,"value")="$st"
    s array("stackSVN",2)="literal"
    s array("stackSVN",2,"value")="$stack"
    ;
    s array("storageSVN")="options"
    s array("storageSVN","force")="forceToLowerCase"
    s array("storageSVN",1)="literal"
    s array("storageSVN",1,"value")="$s"
    s array("storageSVN",2)="literal"
    s array("storageSVN",2,"value")="$storage"
    ;
    s array("systemSVN")="options"
    s array("systemSVN","force")="forceToLowerCase"
    s array("systemSVN",1)="literal"
    s array("systemSVN",1,"value")="$sy"
    s array("systemSVN",2)="literal"
    s array("systemSVN",2,"value")="$system"
    ;
    s array("testSVN")="options"
    s array("testSVN","force")="forceToLowerCase"
    s array("testSVN",1)="literal"
    s array("testSVN",1,"value")="$t"
    s array("testSVN",2)="literal"
    s array("testSVN",2,"value")="$test"
    ;
    s array("tlevelSVN")="options"
    s array("tlevelSVN","force")="forceToLowerCase"
    s array("tlevelSVN",1)="literal"
    s array("tlevelSVN",1,"value")="$tl"
    s array("tlevelSVN",2)="literal"
    s array("tlevelSVN",2,"value")="$tlevel"
    ;
    s array("trestartSVN")="options"
    s array("trestartSVN","force")="forceToLowerCase"
    s array("trestartSVN",1)="literal"
    s array("trestartSVN",1,"value")="$tr"
    s array("trestartSVN",2)="literal"
    s array("trestartSVN",2,"value")="$trestart"
    ;
    s array("xSVN")="literal"
    s array("xSVN","force")="forceToLowerCase"
    s array("xSVN","value")="$x"
    ;
    s array("ySVN")="literal"
    s array("ySVN","force")="forceToLowerCase"
    s array("ySVN","value")="$y"
    ;
    s array("svn")="options"
    s array("svn",1)="token"
    s array("svn",1,"value")="deviceSVN"
    s array("svn",2)="token"
    s array("svn",2,"value")="ecodeSVN"
    s array("svn",3)="token"
    s array("svn",3,"value")="estackSVN"
    s array("svn",4)="token"
    s array("svn",4,"value")="etrapSVN"
    s array("svn",5)="token"
    s array("svn",5,"value")="horologSVN"
    s array("svn",6)="token"
    s array("svn",6,"value")="ioSVN"
    s array("svn",7)="token"
    s array("svn",7,"value")="jobSVN"
    s array("svn",8)="token"
    s array("svn",8,"value")="keySVN"
    s array("svn",9)="token"
    s array("svn",9,"value")="principalSVN"
    s array("svn",10)="token"
    s array("svn",10,"value")="quitSVN"
    s array("svn",11)="token"
    s array("svn",11,"value")="stackSVN"
    s array("svn",12)="token"
    s array("svn",12,"value")="storageSVN"
    s array("svn",13)="token"
    s array("svn",13,"value")="systemSVN"
    s array("svn",14)="token"
    s array("svn",14,"value")="testSVN"
    s array("svn",15)="token"
    s array("svn",15,"value")="tlevelSVN"
    s array("svn",16)="token"
    s array("svn",16,"value")="trestartSVN"
    s array("svn",17)="token"
    s array("svn",17,"value")="xSVN"
    s array("svn",18)="token"
    s array("svn",18,"value")="ySVN"
    ;
    q 1
    ;
    ;
loadPatterns(array)
    s array("patnonYZ")="options"  ;  lower-case letters a-x
    s array("patnonYZ",1)="literal"
    s array("patnonYZ",1,"value")="a"
    s array("patnonYZ",2)="literal"
    s array("patnonYZ",2,"value")="b"
    s array("patnonYZ",3)="literal"
    s array("patnonYZ",3,"value")="c"
    s array("patnonYZ",4)="literal"
    s array("patnonYZ",4,"value")="d"
    s array("patnonYZ",5)="literal"
    s array("patnonYZ",5,"value")="e"
    s array("patnonYZ",6)="literal"
    s array("patnonYZ",6,"value")="f"
    s array("patnonYZ",7)="literal"
    s array("patnonYZ",7,"value")="g"
    s array("patnonYZ",8)="literal"
    s array("patnonYZ",8,"value")="h"
    s array("patnonYZ",9)="literal"
    s array("patnonYZ",9,"value")="i"
    s array("patnonYZ",10)="literal"
    s array("patnonYZ",10,"value")="j"
    s array("patnonYZ",11)="literal"
    s array("patnonYZ",11,"value")="k"
    s array("patnonYZ",12)="literal"
    s array("patnonYZ",12,"value")="l"
    s array("patnonYZ",13)="literal"
    s array("patnonYZ",13,"value")="m"
    s array("patnonYZ",14)="literal"
    s array("patnonYZ",14,"value")="n"
    s array("patnonYZ",15)="literal"
    s array("patnonYZ",15,"value")="o"
    s array("patnonYZ",16)="literal"
    s array("patnonYZ",16,"value")="p"
    s array("patnonYZ",17)="literal"
    s array("patnonYZ",17,"value")="q"
    s array("patnonYZ",18)="literal"
    s array("patnonYZ",18,"value")="r"
    s array("patnonYZ",19)="literal"
    s array("patnonYZ",19,"value")="s"
    s array("patnonYZ",20)="literal"
    s array("patnonYZ",20,"value")="t"
    s array("patnonYZ",21)="literal"
    s array("patnonYZ",21,"value")="u"
    s array("patnonYZ",22)="literal"
    s array("patnonYZ",22,"value")="v"
    s array("patnonYZ",23)="literal"
    s array("patnonYZ",23,"value")="w"
    s array("patnonYZ",24)="literal"
    s array("patnonYZ",24,"value")="x"
    ;
    s array("patnonY")="options"
    s array("patnonY",1)="token"
    s array("patnonY",1,"value")="patnonYZ"
    s array("patnonY",2)="literal"
    s array("patnonY",2,"value")="z"
    ;
    s array("patnonZ")="options"
    s array("patnonZ",1)="token"
    s array("patnonZ",1,"value")="patnonYZ"
    s array("patnonZ",2)="literal"
    s array("patnonZ",2,"value")="y"
    ;
    s array("repcount")="options"
    s array("repcount",1)="token"
    s array("repcount",1,"value")="intlit"
    s array("repcount",2)="subtreeChain"
    s array("repcount",2,1)="options"
    s array("repcount",2,1,1)=""
    s array("repcount",2,1,2)="token"
    s array("repcount",2,1,2,"value")="intlit"
    s array("repcount",2,2)="token"
    s array("repcount",2,2,"value")="period"
    s array("repcount",2,3)="options"
    s array("repcount",2,3,1)=""
    s array("repcount",2,3,2)="token"
    s array("repcount",2,3,2,"value")="intlit"
    ;
    s array("patcode")="subtreeChain"
    s array("patcode",1)="options"
    s array("patcode",1,1)=""
    s array("patcode",1,2)="token"
    s array("patcode",1,2,"value")="singleQuote"
    s array("patcode",2)="delimList"
    s array("patcode",2,"delimiter")=""
    s array("patcode",2,"content")="options"
    s array("patcode",2,"content",1)="token"
    s array("patcode",2,"content",1,"force")="forceToLowerCase"
    s array("patcode",2,"content",1,"value")="patnonYZ"
    s array("patcode",2,"content",2)="subtreeChain"
    s array("patcode",2,"content",2,1)="literal"
    s array("patcode",2,"content",2,1,"value")="Y"
    s array("patcode",2,"content",2,2)="token"
    s array("patCode",2,"content",2,2,"force")="forceToLowerCase"
    s array("patcode",2,"content",2,2,"value")="patnonY"
    s array("patcode",2,"content",2,3)="literal"
    s array("patcode",2,"content",2,3,"value")="Y"
    s array("patcode",2,"content",3)="subtreeChain"
    s array("patcode",2,"content",3,1)="literal"
    s array("patcode",2,"content",3,1,"value")="Z"
    s array("patcode",2,"content",3,2)="token"
    s array("patcode",2,"content",3,2,"force")="forceToLowerCase"
    s array("patcode",2,"content",3,2,"value")="patnonZ"
    s array("patcode",2,"content",3,3)="literal"
    s array("patcode",2,"content",3,3,"value")="Z"
    ;
    s array("patstr")="token"
    s array("patstr","value")="strlit"
    ;
    s array("alternation")="subtreeChain"
    s array("alternation",1)="token"
    s array("alternation",1,"value")="openParen"
    s array("alternation",2)="delimList"
    s array("alternation",2,"delimiter")="token"
    s array("alternation",2,"delimiter","value")="comma"
    s array("alternation",2,"content")="token"
    s array("alternation",2,"content","value")="patatom"
    s array("alternation",3)="token"
    s array("alternation",3,"value")="closeParen"
    ;
    s array("patatom")="subtreeChain"
    s array("patatom",1)="token"
    s array("patatom",1,"value")="repcount"
    s array("patatom",2)="options"
    s array("patatom",2,1)="token"
    s array("patatom",2,1,"value")="patcode"
    s array("patatom",2,2)="token"
    s array("patatom",2,2,"value")="patstr"
    s array("patatom",2,3)="token"
    s array("patatom",2,3,"value")="alternation"
    ;
    s array("pattern")="options"
    s array("pattern",1)="token"
    s array("pattern",1,"value")="patatom"
    s array("pattern",2)="subtreeChain"
    s array("pattern",2,1)="token"
    s array("pattern",2,1,"value")="atSign"
    s array("pattern",2,2)="token"
    s array("pattern",2,2,"value")="expratom"
    ;
    q 1
    ;
    ;
loadExpressions(array)
    s array("unaryop")="options"
    s array("unaryop",1)="token"
    s array("unaryop",1,"value")="singleQuote" ; the apostrophe
    s array("unaryop",2)="token"
    s array("unaryop",2,"value")="plus"
    s array("unaryop",3)="token"
    s array("unaryop",3,"value")="minus"
    ;
    s array("binaryop")="options"
    s array("binaryop",1)="token"
    s array("binaryop",1,"value")="underscore"
    s array("binaryop",2)="token"
    s array("binaryop",2,"value")="plus"
    s array("binaryop",3)="token"
    s array("binaryop",3,"value")="minus"
    s array("binaryop",4)="token"
    s array("binaryop",4,"value")="asterisk"
    s array("binaryop",5)="token"
    s array("binaryop",5,"value")="forwardSlash"
    s array("binaryop",6)="token"
    s array("binaryop",6,"value")="hash"
    s array("binaryop",7)="token"
    s array("binaryop",7,"value")="backSlash"
    s array("binaryop",8)="subtreeChain"
    s array("binaryop",8,1)="token"
    s array("binaryop",8,1,"value")="asterisk"
    s array("binaryop",8,2)="token"
    s array("binaryop",8,2,"value")="asterisk"
    ;
    s array("relation")="options"
    s array("relation",1)="token"
    s array("relation",1,"value")="equals"
    s array("relation",2)="token"
    s array("relation",2,"value")="lessThan"
    s array("relation",3)="token"
    s array("relation",3,"value")="greaterThan"
    s array("relation",4)="token"
    s array("relation",4,"value")="closeBracket"
    s array("relation",5)="token"
    s array("relation",5,"value")="openBracket"
    s array("relation",6)="subtreeChain"
    s array("relation",6,1)="token"
    s array("relation",6,1,"value")="closeBracket"
    s array("relation",6,2)="token"
    s array("relation",6,2,"value")="closeBracket"
    ;
    s array("logicalop")="options"
    s array("logicalop",1)="token"
    s array("logicalop",1,"value")="ampersand"
    s array("logicalop",2)="token"
    s array("logicalop",2,"value")="bang"
    ;
    s array("truthop")="options"
    s array("truthop",1)="token"
    s array("truthop",1,"value")="relation"
    s array("truthop",2)="token"
    s array("truthop",2,"value")="logicalop"
    ;
    s array("expratom")="options"
    s array("expratom",1)="token"
    s array("expratom",1,"value")="strlit"
    s array("expratom",2)="token"
    s array("expratom",2,"value")="numlit"
    s array("expratom",3)="token"
    s array("expratom",3,"value")="exfunc"
    s array("expratom",4)="token"
    s array("expratom",4,"value")="exvar"
    s array("expratom",5)="token"
    s array("expratom",5,"value")="svn"
    s array("expratom",6)="token"
    s array("expratom",6,"value")="function"
    s array("expratom",7)="subtreeChain"
    s array("expratom",7,1)="token"
    s array("expratom",7,1,"value")="unaryop"
    s array("expratom",7,2)="token"
    s array("expratom",7,2,"value")="expratom"
    s array("expratom",8)="subtreeChain"
    s array("expratom",8,1)="token"
    s array("expratom",8,1,"value")="openParen"
    s array("expratom",8,2)="token"
    s array("expratom",8,2,"value")="expr"
    s array("expratom",8,3)="token"
    s array("expratom",8,3,"value")="closeParen"
    s array("expratom",9)="token"
    s array("expratom",9,"value")="glvn"
    ;
    s array("exprtail")="options"
    s array("exprtail",1)="subtreeChain"
    s array("exprtail",1,1)="options"
    s array("exprtail",1,1,1)="token"
    s array("exprtail",1,1,1,"value")="binaryop"
    s array("exprtail",1,1,2)="subtreeChain"
    s array("exprtail",1,1,2,1)="options"
    s array("exprtail",1,1,2,1,1)=""
    s array("exprtail",1,1,2,1,2)="token"
    s array("exprtail",1,1,2,1,2,"value")="singleQuote"
    s array("exprtail",1,1,2,2)="token"
    s array("exprtail",1,1,2,2,"value")="truthop"
    s array("exprtail",1,2)="token"
    s array("exprtail",1,2,"value")="expratom"
    s array("exprtail",2)="subtreeChain"
    s array("exprtail",2,1)="options"
    s array("exprtail",2,1,1)=""
    s array("exprtail",2,1,2)="token"
    s array("exprtail",2,1,2,"value")="singleQuote"
    s array("exprtail",2,2)="token"
    s array("exprtail",2,2,"value")="questionMark"
    s array("exprtail",2,3)="token"
    s array("exprtail",2,3,"value")="pattern"
    ;
    s array("expr")="subtreeChain"
    s array("expr",1)="token"
    s array("expr",1,"value")="expratom"
    s array("expr",2)="delimList"
    s array("expr",2,"content")=""
    s array("expr",2,"delimiter")="token"
    s array("expr",2,"delimiter","value")="exprtail"
    ;
    s array("tvexpr")="token"
    s array("tvexpr","value")="expr"
    ;
    s array("intexpr")="token"
    s array("intexpr","value")="expr"
    ;
    s array("numexpr")="token"
    s array("numexpr","value")="expr"
    ;
    q 1
    ;
    ;
    ; This loads the command structure of the grammar
loadCommands(array)
    s array("spaces")="delimList"
    s array("spaces","content")="token"
    s array("spaces","content","value")="SP"
    s array("spaces","delimiter")=""
    ;
    s array("postcondControlExpr")="token"
    s array("postcondControlExpr","value")="tvexpr"
    ;
    s array("postcond")="options"
    s array("postcond",1)=""
    s array("postcond",2)="subtreeChain"
    s array("postcond",2,1)="token"
    s array("postcond",2,1,"value")="colon"
    s array("postcond",2,2)="token"
    s array("postcond",2,2,"value")="postcondControlExpr"
    ;
    s array("breakCommand")="subtreeChain"
    s array("breakCommand",1)="options"
    s array("breakCommand",1,"force")="forceToLowerCase"
    s array("breakCommand",1,1)="literal"
    s array("breakCommand",1,1,"value")="b"
    s array("breakCommand",1,2)="literal"
    s array("breakCommand",1,2,"value")="break"
    s array("breakCommand",2)="token"
    s array("breakCommand",2,"value")="postcond"
    s array("breakCommand",3)="token"
    s array("breakCommand",3,"value")="SP"
    ;
    s array("breakToggleArgument")="token"
    s array("breakToggleArgument","value")="expr"
    ;
    s array("breakToggleCommand")="subtreeChain" ; This is actually unspecified in the MUMPS standard
    s array("breakToggleCommand",1)="options"
    s array("breakToggleCommand",1,"force")="forceToLowerCase"
    s array("breakToggleCommand",1,1)="literal"
    s array("breakToggleCommand",1,1,"value")="b"
    s array("breakToggleCommand",1,2)="literal"
    s array("breakToggleCommand",1,2,"value")="break"
    s array("breakToggleCommand",2)="token"
    s array("breakToggleCommand",2,"value")="postcond"
    s array("breakToggleCommand",3)="token"
    s array("breakToggleCommand",3,"value")="SP"
    s array("breakToggleCommand",4)="token"
    s array("breakToggleCommand",4,"value")="breakToggleArgument"
    ;
    s array("devicekeyword")="token"
    s array("devicekeyword","value")="name"
    ;
    s array("deviceattribute")="token"
    s array("deviceattribute","value")="name"
    ;
    s array("oneDeviceParam")="options"
    s array("oneDeviceParam",1)="token"
    s array("oneDeviceParam",1,"value")="expr"
    s array("oneDeviceParam",2)="token"
    s array("oneDeviceParam",2,"value")="devicekeyword"
    s array("oneDeviceParam",3)="subtreeChain"
    s array("oneDeviceParam",3,1)="token"
    s array("oneDeviceParam",3,1,"value")="deviceattribute"
    s array("oneDeviceParam",3,2)="token"
    s array("oneDeviceParam",3,2,"value")="equals"
    s array("oneDeviceParam",3,3)="token"
    s array("oneDeviceParam",3,3,"value")="expr"
    ;
    s array("deviceParameters")="options"
    s array("deviceParameters",1)="token"
    s array("deviceParameters",1,"value")="oneDeviceParam"
    s array("deviceParameters",2)="subtreeChain"
    s array("deviceParameters",2,1)="token"
    s array("deviceParameters",2,1,"value")="openParen"
    s array("deviceParameters",2,2)="subtreeChain"
    s array("deviceParameters",2,2,1)="options"
    s array("deviceParameters",2,2,1,1)=""
    s array("deviceParameters",2,1,1,2)="subtreeChain"
    s array("deviceParameters",2,2,1,2,1)="delimList"
    s array("deviceParameters",2,2,1,2,1,"delimiter")="token"
    s array("deviceParameters",2,2,1,2,1,"delimiter","value")="colon"
    s array("deviceParameters",2,2,1,2,1,"content")="options"
    s array("deviceParameters",2,2,1,2,1,"content",1)=""
    s array("deviceParameters",2,2,1,2,1,"content",2)="token"
    s array("deviceParameters",2,2,1,2,1,"content",2,"value")="oneDeviceParam"
    s array("deviceParameters",2,1,1,2,2)="token"
    s array("deviceParameters",2,1,1,2,2,"value")="colon"
    s array("deviceParameters",2,1,2)="token"
    s array("deviceParameters",2,1,2,"value")="oneDeviceParam"
    s array("deviceParameters",2,3)="token"
    s array("deviceParameters",2,3,"value")="closeParen"
    ;
    s array("closeargument")="options"
    s array("closeargument",1)="subtreeChain"
    s array("closeargument",1,1)="token"
    s array("closeargument",1,1,"value")="expr"
    s array("closeargument",1,2)="options"
    s array("closeargument",1,2,1)=""
    s array("closeargument",1,2,2)="subtreeChain"
    s array("closeargument",1,2,2,1)="token"
    s array("closeargument",1,2,2,1,"value")="colon"
    s array("closeargument",1,2,2,2)="token"
    s array("closeargument",1,2,2,2,"value")="deviceParameters"
    s array("closeargument",2)="subtreeChain"
    s array("closeargument",2,1)="token"
    s array("closeargument",2,1,"value")="atSign"
    s array("closeargument",2,2)="token"
    s array("closeargument",2,2,"value")="expratom"
    ;
    s array("closeCommand")="subtreeChain"
    s array("closeCommand",1)="options"
    s array("closeCommand",1,"force")="forceToLowerCase"
    s array("closeCommand",1,1)="literal"
    s array("closeCommand",1,1,"value")="c"
    s array("closeCommand",1,2)="literal"
    s array("closeCommand",1,2,"value")="close"
    s array("closeCommand",2)="token"
    s array("closeCommand",2,"value")="postcond"
    s array("closeCommand",3)="token"
    s array("closeCommand",3,"value")="SP"
    s array("closeCommand",4)="delimList"
    s array("closeCommand",4,"delimiter")="token"
    s array("closeCommand",4,"delimiter","value")="comma"
    s array("closeCommand",4,"content")="token"
    s array("closeCommand",4,"content","value")="closeargument"
    ;
    s array("doargument")="options"
    s array("doargument",1)="subtreeChain"
    s array("doargument",1,1)="token"
    s array("doargument",1,1,"value")="entryref"
    s array("doargument",1,2)="token"
    s array("doargument",1,2,"value")="postcond"
    s array("doargument",2)="subtreeChain"
    s array("doargument",2,1)="token"
    s array("doargument",2,1,"value")="labelref"
    s array("doargument",2,2)="token"
    s array("doargument",2,2,"value")="actuallist"
    s array("doargument",2,3)="token"
    s array("doargument",2,3,"value")="postcond"
    s array("doargument",3)="subtreeChain"
    s array("doargument",3,1)="token"
    s array("doargument",3,1,"value")="externref"
    s array("doargument",3,2)="options"
    s array("doargument",3,2,1)=""
    s array("doargument",3,2,2)="token"
    s array("doargument",3,2,2,"value")="actuallist"
    s array("doargument",3,3)="token"
    s array("doargument",3,3,"value")="postcond"
    s array("doargument",4)="subtreeChain"
    s array("doargument",4,1)="token"
    s array("doargument",4,1,"value")="atSign"
    s array("doargument",4,2)="token"
    s array("doargument",4,2,"value")="expratom"
    ;
    s array("doCommand")="subtreeChain"
    s array("doCommand",1)="options"
    s array("doCommand",1,"force")="forceToLowerCase"
    s array("doCommand",1,1)="literal"
    s array("doCommand",1,1,"value")="d"
    s array("doCommand",1,2)="literal"
    s array("doCommand",1,2,"value")="do"
    s array("doCommand",2)="token"
    s array("doCommand",2,"value")="postcond"
    s array("doCommand",3)="token"
    s array("doCommand",3,"value")="SP"
    s array("doCommand",4)="delimList"
    s array("doCommand",4,"delimiter")="token"
    s array("doCommand",4,"delimiter","value")="comma"
    s array("doCommand",4,"content")="token"
    s array("doCommand",4,"content","value")="doargument"
    ;
    s array("doNextCommand")="subtreeChain"
    s array("doNextCommand",1)="options"
    s array("doNextCommand",1,"force")="forceToLowerCase"
    s array("doNextCommand",1,1)="literal"
    s array("doNextCommand",1,1,"value")="d"
    s array("doNextCommand",1,2)="literal"
    s array("doNextCommand",1,2,"value")="do"
    s array("doNextCommand",2)="token"
    s array("doNextCommand",2,"value")="postcond"
    s array("doNextCommand",3)="token"
    s array("doNextCommand",3,"value")="SP"
    ;
    s array("elseCommand")="subtreeChain"
    s array("elseCommand",1)="options"
    s array("elseCommand",1,"force")="forceToLowerCase"
    s array("elseCommand",1,1)="literal"
    s array("elseCommand",1,1,"value")="e"
    s array("elseCommand",1,2)="literal"
    s array("elseCommand",1,2,"value")="else"
    s array("elseCommand",2)="token"
    s array("elseCommand",2,"value")="SP"
    ;
    s array("forparameter")="options"
    s array("forparameter",1)="delimList" ; The MUMPS annotated standard gets this one wrong.
    s array("forparameter",1,"content")="token"
    s array("forparameter",1,"content","value")="expr"
    s array("forparameter",1,"delimiter")="token"
    s array("forparameter",1,"delimiter","value")="comma"
    s array("forparameter",2)="subtreeChain"
    s array("forparameter",2,1)="token"
    s array("forparameter",2,1,"value")="numexpr"
    s array("forparameter",2,2)="token"
    s array("forparameter",2,2,"value")="colon"
    s array("forparameter",2,3)="token"
    s array("forparameter",2,3,"value")="numexpr"
    s array("forparameter",3)="subtreeChain"
    s array("forparameter",3,1)="token"
    s array("forparameter",3,1,"value")="numexpr"
    s array("forparameter",3,2)="token"
    s array("forparameter",3,2,"value")="colon"
    s array("forparameter",3,3)="token"
    s array("forparameter",3,3,"value")="numexpr"
    s array("forparameter",3,4)="token"
    s array("forparameter",3,4,"value")="colon"
    s array("forparameter",3,5)="token"
    s array("forparameter",3,5,"value")="numexpr"
    ;
    s array("foreverCommand")="subtreeChain"
    s array("foreverCommand",1)="options"
    s array("foreverCommand",1,"force")="forceToLowerCase"
    s array("foreverCommand",1,1)="literal"
    s array("foreverCommand",1,1,"value")="f"
    s array("foreverCommand",1,2)="literal"
    s array("foreverCommand",1,2,"value")="for"
    s array("foreverCommand",2)="token"
    s array("foreverCommand",2,"value")="SP"
    ;
    s array("forCommand")="subtreeChain"
    s array("forCommand",1)="options"
    s array("forCommand",1,"force")="forceToLowerCase"
    s array("forCommand",1,1)="literal"
    s array("forCommand",1,1,"value")="f"
    s array("forCommand",1,2)="literal"
    s array("forCommand",1,2,"value")="for"
    s array("forCommand",2)="token"
    s array("forCommand",2,"value")="SP"
    s array("forCommand",3)="token"
    s array("forCommand",3,"value")="lvn" ; This is the only place an "lvn" is allowed, but a "gvn" is not.
    s array("forCommand",4)="token"
    s array("forCommand",4,"value")="equals"
    s array("forCommand",5)="token"
    s array("forCommand",5,"value")="forparameter"
    ;
    s array("gotoargument")="options"
    s array("gotoargument",1)="subtreeChain"
    s array("gotoargument",1,1)="token"
    s array("gotoargument",1,1,"value")="entryref"
    s array("gotoargument",1,2)="token"
    s array("gotoargument",1,2,"value")="postcond"
    s array("gotoargument",2)="subtreeChain"
    s array("gotoargument",2,1)="token"
    s array("gotoargument",2,1,"value")="atSign"
    s array("gotoargument",2,2)="token"
    s array("gotoargument",2,2,"value")="expratom"
    ;
    s array("gotoCommand")="subtreeChain"
    s array("gotoCommand",1)="options"
    s array("gotoCommand",1,"force")="forceToLowerCase"
    s array("gotoCommand",1,1)="literal"
    s array("gotoCommand",1,1,"value")="g"
    s array("gotoCommand",1,2)="literal"
    s array("gotoCommand",1,2,"value")="goto"
    s array("gotoCommand",2)="token"
    s array("gotoCommand",2,"value")="postcond"
    s array("gotoCommand",3)="token"
    s array("gotoCommand",3,"value")="SP"
    s array("gotoCommand",4)="delimList"
    s array("gotoCommand",4,"delimiter")="token"
    s array("gotoCommand",4,"delimiter","value")="comma"
    s array("gotoCommand",4,"content")="token"
    s array("gotoCommand",4,"content","value")="gotoargument"
    ;
    s array("haltCommand")="subtreeChain"
    s array("haltCommand",1)="options"
    s array("haltCommand",1,"force")="forceToLowerCase"
    s array("haltCommand",1,1)="literal"
    s array("haltCommand",1,1,"value")="h"
    s array("haltCommand",1,2)="literal"
    s array("haltCommand",1,2,"value")="halt"
    s array("haltCommand",2)="token"
    s array("haltCommand",2,"value")="postcond"
    s array("haltCommand",3)="token"
    s array("haltCommand",3,"value")="SP"
    ;
    s array("hangargument")="options"
    s array("hangargument",1)="token"
    s array("hangargument",1,"value")="numexpr"
    s array("hangargument",2)="subtreeChain"
    s array("hangargument",2,1)="token"
    s array("hangargument",2,1,"value")="atSign"
    s array("hangargument",2,2)="token"
    s array("hangargument",2,2,"value")="expratom"
    ;
    s array("hangCommand")="subtreeChain"
    s array("hangCommand",1)="options"
    s array("hangCommand",1,"force")="forceToLowerCase"
    s array("hangCommand",1,1)="literal"
    s array("hangCommand",1,1,"value")="h"
    s array("hangCommand",1,2)="literal"
    s array("hangCommand",1,2,"value")="hang"
    s array("hangCommand",2)="token"
    s array("hangCommand",2,"value")="postcond"
    s array("hangCommand",3)="token"
    s array("hangCommand",3,"value")="SP"
    s array("hangCommand",4)="delimList"
    s array("hangCommand",4,"delimiter")="token"
    s array("hangCommand",4,"delimiter","value")="comma"
    s array("hangCommand",4,"content")="token"
    s array("hangCommand",4,"content","value")="hangargument"
    ;
    s array("ifargument")="options"
    s array("ifargument",1)="token"
    s array("ifargument",1,"value")="tvexpr"
    s array("ifargument",2)="subtreeChain"
    s array("ifargument",2,1)="token"
    s array("ifargument",2,1,"value")="atSign"
    s array("ifargument",2,2)="token"
    s array("ifargument",2,2,"value")="expratom"
    ;
    s array("ifCommand")="subtreeChain"
    s array("ifCommand",1)="options"
    s array("ifCommand",1,"force")="forceToLowerCase"
    s array("ifCommand",1,1)="literal"
    s array("ifCommand",1,1,"value")="i"
    s array("ifCommand",1,2)="literal"
    s array("ifCommand",1,2,"value")="if"
    s array("ifCommand",2)="token"
    s array("ifCommand",2,"value")="SP"
    s array("ifCommand",3)="options"
    s array("ifCommand",3,1)=""
    s array("ifCommand",3,2)="delimList"
    s array("ifCommand",3,2,"content")="token"
    s array("ifCommand",3,2,"content","value")="ifargument"
    s array("ifCommand",3,2,"delimiter")="token"
    s array("ifCommand",3,2,"delimiter","value")="comma"
    ;
    s array("processparameters")="options"
    s array("processparameters",1)="token"
    s array("processparameters",1,"value")="expr"
    s array("processparameters",2)="subtreeChain"
    s array("processParameters",2,1)="token"
    s array("processParameters",2,1,"value")="openParen"
    s array("processparameters",2,2)="subtreeChain"
    s array("processparameters",2,2,1)="options"
    s array("processparameters",2,2,1,1)=""
    s array("processParameters",2,1,1,2)="subtreeChain"
    s array("processparameters",2,2,1,2,1)="delimList"
    s array("processparameters",2,2,1,2,1,"delimiter")="token"
    s array("processparameters",2,2,1,2,1,"delimiter","value")="colon"
    s array("processparameters",2,2,1,2,1,"content")="options"
    s array("processparameters",2,2,1,2,1,"content",1)=""
    s array("processparameters",2,2,1,2,1,"content",2)="token"
    s array("processparameters",2,2,1,2,1,"content",2,"value")="expr"
    s array("processparameters",2,1,1,2,2)="token"
    s array("processparameters",2,1,1,2,2,"value")="colon"
    s array("processparameters",2,1,2)="token"
    s array("processparameters",2,1,2,"value")="expr"
    s array("processparameters",2,3)="token"
    s array("processparameters",2,3,"value")="closeParen"
    ;
    s array("timeout")="subtreeChain"
    s array("timeout",1)="token"
    s array("timeout",1,"value")="colon"
    s array("timeout",2)="token"
    s array("timeout",2,"value")="numexpr"
    ;
    s array("jobparameters")="options"
    s array("jobparameters",1)="token"
    s array("jobparameters",1,"value")="timeout"
    s array("jobparameters",2)="subtreeChain"
    s array("jobparameters",2,1)="processparameters"
    s array("jobparameters",2,2)="options"
    s array("jobparameters",2,2,1)=""
    s array("jobparameters",2,2,2)="token"
    s array("jobparameters",2,2,2,"value")="timeout"
    ;
    s array("jobargument")="options"
    s array("jobargument",1)="subtreeChain"
    s array("jobargument",1,1)="token"
    s array("jobargument",1,1,"value")="entryref"
    s array("jobargument",1,2)="options"
    s array("jobargument",1,2,1)=""
    s array("jobargument",1,2,2)="subtreeChain"
    s array("jobargument",1,2,2,1)="token"
    s array("jobargument",1,2,2,1,"value")="colon"
    s array("jobargument",1,2,2,2)="token"
    s array("jobargument",1,2,2,2,"value")="jobparameters"
    s array("jobargument",2)="subtreeChain"
    s array("jobargument",2,1)="token"
    s array("jobargument",2,1,"value")="labelref"
    s array("jobargument",2,2)="token"
    s array("jobargument",2,2,"value")="actuallist"
    s array("jobargument",2,3)="options"
    s array("jobargument",2,3,1)=""
    s array("jobargument",2,3,2)="subtreeChain"
    s array("jobargument",2,3,2,1)="token"
    s array("jobargument",2,3,2,1,"value")="colon"
    s array("jobargument",2,3,2,2)="token"
    s array("jobargument",2,3,2,2,"value")="jobparameters"
    s array("jobargument",3)="subtreeChain"
    s array("jobargument",3,1)="token"
    s array("jobargument",3,1,"value")="atSign"
    s array("jobargument",3,2)="token"
    s array("jobargument",3,2,"value")="expratom"
    ;
    s array("jobCommand")="subtreeChain"
    s array("jobCommand",1)="options"
    s array("jobCommand",1,"force")="forceToLowerCase"
    s array("jobCommand",1,1)="literal"
    s array("jobCommand",1,1,"value")="j"
    s array("jobCommand",1,2)="literal"
    s array("jobCommand",1,2,"value")="job"
    s array("jobCommand",2)="token"
    s array("jobCommand",2,"value")="postcond"
    s array("jobCommand",3)="token"
    s array("jobCommand",3,"value")="SP"
    s array("jobCommand",4)="delimList"
    s array("jobCommand",4,"delimiter")="token"
    s array("jobCommand",4,"delimiter","value")="comma"
    s array("jobCommand",4,"content")="token"
    s array("jobCommand",4,"content","value")="jobargument"
    ;
    s array("lname")="options"
    s array("lname",1)="token"
    s array("lname",1,"value")="name"
    s array("lname",2)="subtreeChain"
    s array("lname",2,1)="token"
    s array("lname",2,1,"value")="atSign"
    s array("lname",2,2)="token"
    s array("lname",2,2,"value")="expratom"
    ;
    s array("killargument")="options"
    s array("killargument",1)="token"
    s array("killargument",1,"value")="glvn"
    s array("killargument",2)="subtreeChain"
    s array("killargument",2,1)="token"
    s array("killargument",2,1,"value")="openParen"
    s array("killargument",2,2)="delimList"
    s array("killargument",2,2,"delimiter")="token"
    s array("killargument",2,2,"delimiter","value")="comma"
    s array("killargument",2,2,"content")="token"
    s array("killargument",2,2,"content","value")="lname"
    s array("killargument",2,3)="token"
    s array("killargument",2,3,"value")="closeParen"
    s array("killargument",3)="subtreeChain"
    s array("killargument",3,1)="token"
    s array("killargument",3,1,"value")="atSign"
    s array("killargument",3,2)="token"
    s array("killargument",3,2,"value")="expratom"
    ;
    s array("killallCommand")="subtreeChain"
    s array("killallCommand",1)="options"
    s array("killallCommand",1,"force")="forceToLowerCase"
    s array("killallCommand",1,1)="literal"
    s array("killallCommand",1,1,"value")="k"
    s array("killallCommand",1,2)="literal"
    s array("killallCommand",1,2,"value")="kill"
    s array("killallCommand",2)="token"
    s array("killallCommand",2,"value")="postcond"
    s array("killallCommand",3)="token"
    s array("killallCommand",3,"value")="SP"
    ;
    s array("killCommand")="subtreeChain"
    s array("killCommand",1)="options"
    s array("killCommand",1,"force")="forceToLowerCase"
    s array("killCommand",1,1)="literal"
    s array("killCommand",1,1,"value")="k"
    s array("killCommand",1,2)="literal"
    s array("killCommand",1,2,"value")="kill"
    s array("killCommand",2)="token"
    s array("killCommand",2,"value")="postcond"
    s array("killCommand",3)="token"
    s array("killCommand",3,"value")="SP"
    s array("killCommand",4)="delimList"
    s array("killCommand",4,"delimiter")="token"
    s array("killCommand",4,"delimiter","value")="comma"
    s array("killCommand",4,"content")="token"
    s array("killCommand",4,"content","value")="killargument"
    ;
    s array("nref")="options"
    s array("nref",1)="subtreeChain"
    s array("nref",1,1)="options"
    s array("nref",1,1,1)=""
    s array("nref",1,1,2)="token"
    s array("nref",1,1,2,"value")="caret"
    s array("nref",1,2)="options"
    s array("nref",1,2,1)=""
    s array("nref",1,2,2)="subtreeChain"
    s array("nref",1,2,2,1)="token"
    s array("nref",1,2,2,1,"value")="pipe"
    s array("nref",1,2,2,2)="token"
    s array("nref",1,2,2,2,"value")="environment"
    s array("nref",1,2,2,3)="token"
    s array("nref",1,2,2,3,"value")="pipe"
    s array("nref",1,3)="token"
    s array("nref",1,3,"value")="name"
    s array("nref",1,4)="options"
    s array("nref",1,4,1)=""
    s array("nref",1,4,2)="subtreeChain"
    s array("nref",1,4,2,1)="token"
    s array("nref",1,4,2,1,"value")="openParen"
    s array("nref",1,4,2,2)="delimList"
    s array("nref",1,4,2,2,"content")="token"
    s array("nref",1,4,2,2,"content","value")="expr"
    s array("nref",1,4,2,2,"delimiter")="token"
    s array("nref",1,4,2,2,"delimiter","value")="comma"
    s array("nref",1,4,2,3)="token"
    s array("nref",1,4,2,3,"value")="closeParen"
    s array("nref",2)="subtreeChain"
    s array("nref",2,1)="token"
    s array("nref",2,1,"value")="atSign"
    s array("nref",2,2)="token"
    s array("nref",2,2,"value")="expratom"
    ;
    s array("lockargument")="options"
    s array("lockargument",1)="subtreeChain"
    s array("lockargument",1,1)="token"
    s array("lockargument",1,1,"value")="atSign"
    s array("lockargument",1,2)="token"
    s array("lockargument",1,2,"value")="expratom"
    s array("lockargument",2)="subtreeChain"
    s array("lockargument",2,1)="options"
    s array("lockargument",2,1,1)="token"
    s array("lockargument",2,1,1,"value")="plus"
    s array("lockargument",2,1,2)="token"
    s array("lockargument",2,1,2,"value")="minus"
    s array("lockargument",2,1,3)=""
    s array("lockargument",2,2)="options"
    s array("lockargument",2,2,1)="token"
    s array("lockargument",2,2,1,"value")="nref"
    s array("lockargument",2,2,2)="subtreeChain"
    s array("lockargument",2,2,2,1)="token"
    s array("lockargument",2,2,2,1,"value")="openParen"
    s array("lockargument",2,2,2,2)="delimList"
    s array("lockargument",2,2,2,2,"content")="token"
    s array("lockargument",2,2,2,2,"content","value")="nref"
    s array("lockargument",2,2,2,2,"delimiter")="token"
    s array("lockargument",2,2,2,2,"delimiter","value")="comma"
    s array("lockargument",2,2,2,3)="token"
    s array("lockargument",2,2,2,3,"value")="closeParen"
    s array("lockargument",2,3)="options"
    s array("lockargument",2,3,1)=""
    s array("lockargument",2,3,2)="token"
    s array("lockargument",2,3,2,"value")="timeout"
    ;
    s array("lockNoneCommand")="subtreeChain"
    s array("lockNoneCommand",1)="options"
    s array("lockNoneCommand",1,"force")="forceToLowerCase"
    s array("lockNoneCommand",1,1)="literal"
    s array("lockNoneCommand",1,1,"value")="l"
    s array("lockNoneCommand",1,2)="literal"
    s array("lockNoneCommand",1,2,"value")="lock"
    s array("lockNoneCommand",2)="token"
    s array("lockNoneCommand",2,"value")="postcond"
    s array("lockNoneCommand",3)="token"
    s array("lockNoneCommand",3,"value")="SP"
    ;
    s array("lockCommand")="subtreeChain"
    s array("lockCommand",1)="options"
    s array("lockCommand",1,"force")="forceToLowerCase"
    s array("lockCommand",1,1)="literal"
    s array("lockCommand",1,1,"value")="l"
    s array("lockCommand",1,2)="literal"
    s array("lockCommand",1,2,"value")="lock"
    s array("lockCommand",2)="token"
    s array("lockCommand",2,"value")="postcond"
    s array("lockCommand",3)="token"
    s array("lockCommand",3,"value")="SP"
    s array("lockCommand",4)="delimList"
    s array("lockCommand",4,"delimiter")="token"
    s array("lockCommand",4,"delimiter","value")="comma"
    s array("lockCommand",4,"content")="token"
    s array("lockCommand",4,"content","value")="lockargument"
    ;
    s array("mergeargument")="options"
    s array("mergeargument",1)="subtreeChain"
    s array("mergeargument",1,1)="token"
    s array("mergeargument",1,1,"value")="glvn"
    s array("mergeargument",1,2)="token"
    s array("mergeargument",1,2,"value")="equals"
    s array("mergeargument",1,3)="token"
    s array("mergeargument",1,3,"value")="glvn"
    s array("mergeargument",2)="subtreeChain"
    s array("mergeargument",2,1)="token"
    s array("mergeargument",2,1,"value")="atSign"
    s array("mergeargument",2,2)="token"
    s array("mergeargument",2,2,"value")="expratom"
    ;
    s array("mergeCommand")="subtreeChain"
    s array("mergeCommand",1)="options"
    s array("mergeCommand",1,"force")="forceToLowerCase"
    s array("mergeCommand",1,1)="literal"
    s array("mergeCommand",1,1,"value")="m"
    s array("mergeCommand",1,2)="literal"
    s array("mergeCommand",1,2,"value")="merge"
    s array("mergeCommand",2)="token"
    s array("mergeCommand",2,"value")="postcond"
    s array("mergeCommand",3)="token"
    s array("mergeCommand",3,"value")="SP"
    s array("mergeCommand",4)="delimList"
    s array("mergeCommand",4,"delimiter")="token"
    s array("mergeCommand",4,"delimiter","value")="comma"
    s array("mergeCommand",4,"content")="token"
    s array("mergeCommand",4,"content","value")="mergeargument"
    ;
    s array("newsvn")="options"
    s array("newsvn","force")="forceToLowerCase"
    s array("newsvn",1)="options"
    s array("newsvn",1,1)="literal"
    s array("newsvn",1,1,"value")="$ET"
    s array("newsvn",1,2)="literal"
    s array("newsvn",1,2,"value")="$ETRAP"
    s array("newsvn",2)="options"
    s array("newsvn",2,1)="literal"
    s array("newsvn",2,1,"value")="$ES"
    s array("newsvn",2,2)="literal"
    s array("newsvn",2,2,"value")="$ESTACK"
    ;
    s array("newargument")="options"
    s array("newargument",1)="token"
    s array("newargument",1,"value")="lname"
    s array("newargument",2)="subtreeChain"
    s array("newargument",2,1)="token"
    s array("newargument",2,1,"value")="openParen"
    s array("newargument",2,2)="delimList"
    s array("newargument",2,2,"delimiter")="token"
    s array("newargument",2,2,"delimiter","value")="comma"
    s array("newargument",2,2,"content")="token"
    s array("newargument",2,2,"content","value")="lname"
    s array("newargument",2,3)="token"
    s array("newargument",2,3,"value")="closeParen"
    s array("newargument",3)="subtreeChain"
    s array("newargument",3,1)="token"
    s array("newargument",3,1,"value")="atSign"
    s array("newargument",3,2)="token"
    s array("newargument",3,2,"value")="expratom"
    s array("newargument",4)="token"
    s array("newargument",4,"value")="newsvn"
    ;
    s array("newAllCommand")="subtreeChain"
    s array("newAllCommand",1)="options"
    s array("newAllCommand",1,"force")="forceToLowerCase"
    s array("newAllCommand",1,1)="literal"
    s array("newAllCommand",1,1,"value")="n"
    s array("newAllCommand",1,2)="literal"
    s array("newAllCommand",1,2,"value")="new"
    s array("newAllCommand",2)="token"
    s array("newAllCommand",2,"value")="postcond"
    s array("newAllCommand",3)="token"
    s array("newAllCommand",3,"value")="SP"
    ;
    s array("newCommand")="subtreeChain"
    s array("newCommand",1)="options"
    s array("newCommand",1,"force")="forceToLowerCase"
    s array("newCommand",1,1)="literal"
    s array("newCommand",1,1,"value")="n"
    s array("newCommand",1,2)="literal"
    s array("newCommand",1,2,"value")="new"
    s array("newCommand",2)="token"
    s array("newCommand",2,"value")="postcond"
    s array("newCommand",3)="token"
    s array("newCommand",3,"value")="SP"
    s array("newCommand",4)="delimList"
    s array("newCommand",4,"delimiter")="token"
    s array("newCommand",4,"delimiter","value")="comma"
    s array("newCommand",4,"content")="token"
    s array("newCommand",4,"content","value")="newargument"
    ;
    s array("mnemonicspacename")="subtreeChain"
    s array("mnemonicspacename",1)="token"
    s array("mnemonicspacename",1,"value")="ident"
    s array("mnemonicspacename",2)="delimList"
    s array("mnemonicspacename",2,"content")=""
    s array("mnemonicspacename",2,"delimiter")="options"
    s array("mnemonicspacename",2,"delimiter",1)="token"
    s array("mnemonicspacename",2,"delimiter",1,"value")="ident"
    s array("mnemonicspacename",2,"delimiter",2)="token"
    s array("mnemonicspacename",2,"delimiter",2,"value")="digit"
    s array("mnemonicspacename",2,"delimiter",3)="token"
    s array("mnemonicspacename",2,"delimiter",3,"value")="period"
    s array("mnemonicspacename",2,"delimiter",4)="token"
    s array("mnemonicspacename",2,"delimiter",4,"value")="minus"
    ;
    s array("mnemonicspace")="token"
    s array("mnemonicspace","value")="expr"
    ;
    s array("mnemonicspec")="options"
    s array("mnemonicspec",1)="token"
    s array("mnemonicspec",1,"value")="mnemonicspace"
    s array("mnemonicspec",2)="subtreeChain"
    s array("mnemonicspec",2,1)="token"
    s array("mnemonicspec",2,1,"value")="openParen"
    s array("mnemonicspec",2,2)="delimList"
    s array("mnemonicspec",2,2,"delimiter")="token"
    s array("mnemonicspec",2,2,"delimiter","value")="comma"
    s array("mnemonicspec",2,2,"content")="token"
    s array("mnemonicspec",2,2,"content","value")="mnemonicspace"
    s array("mnemonicspec",2,3)="token"
    s array("mnemonicspec",2,3,"value")="closeParen"
    ;
    s array("openparameters")="options"
    s array("openparameters",1)="subtreeChain"
    s array("openparameters",1,1)="token"
    s array("openparameters",1,1,"value")="deviceParameters"
    s array("openparameters",1,2)="options"
    s array("openparameters",1,2,1)=""
    s array("openparameters",1,2,2)="subtreeChain"
    s array("openparameters",1,2,2,1)="token"
    s array("openparameters",1,2,2,1,"value")="timeout"
    s array("openparameters",1,2,2,2)="options"
    s array("openparameters",1,2,2,2,1)=""
    s array("openparameters",1,2,2,2,2)="subtreeChain"
    s array("openparameters",1,2,2,2,2,1)="token"
    s array("openparameters",1,2,2,2,2,1,"value")="colon"
    s array("openparameters",1,2,2,2,2,2)="token"
    s array("openparameters",1,2,2,2,2,2,"value")="mnemonicspec"
    s array("openparameters",2)="subtreeChain"
    s array("openparameters",2,1)="options"
    s array("openparameters",2,1,1)=""
    s array("openparameters",2,1,2)="token"
    s array("openparameters",2,1,2,"value")="deviceParameters"
    s array("openparameters",2,2)="literal"
    s array("openparameters",2,2,"value")="::"
    s array("openparameters",2,3)="token"
    s array("openparameters",2,3,"value")="mnemonicspec"
    s array("openparameters",3)="subtreeChain"
    s array("openparameters",3,1)="token"
    s array("openparameters",3,1,"value")="timeout"
    s array("openparameters",3,2)="options"
    s array("openparameters",3,2,1)=""
    s array("openparameters",3,2,2)="subtreeChain"
    s array("openparameters",3,2,2,1)="token"
    s array("openparameters",3,2,2,1,"value")="colon"
    s array("openparameters",3,2,2,2)="token"
    s array("openparameters",3,2,2,2,"value")="mnemonicspec"
    ;
    s array("openargument")="options"
    s array("openargument",1)="subtreeChain"
    s array("openargument",1,1)="token"
    s array("openargument",1,1,"value")="expr"
    s array("openargument",1,2)="options"
    s array("openargument",1,2,1)=""
    s array("openargument",1,2,2)="subtreeChain"
    s array("openargument",1,2,2,1)="token"
    s array("openargument",1,2,2,1,"value")="atSign"
    s array("openargument",1,2,2,2)="token"
    s array("openargument",1,2,2,2,"value")="expratom"
    ;
    s array("openCommand")="subtreeChain"
    s array("openCommand",1)="options"
    s array("openCommand",1,"force")="forceToLowerCase"
    s array("openCommand",1,1)="literal"
    s array("openCommand",1,1,"value")="o"
    s array("openCommand",1,2)="literal"
    s array("openCommand",1,2,"value")="open"
    s array("openCommand",2)="token"
    s array("openCommand",2,"value")="postcond"
    s array("openCommand",3)="token"
    s array("openCommand",3,"value")="SP"
    s array("openCommand",4)="delimList"
    s array("openCommand",4,"delimiter")="token"
    s array("openCommand",4,"delimiter","value")="comma"
    s array("openCommand",4,"content")="token"
    s array("openCommand",4,"content","value")="openargument"
    ;
    s array("quitReturnCommand")="subtreeChain"
    s array("quitReturnCommand",1)="options"
    s array("quitReturnCommand",1,"force")="forceToLowerCase"
    s array("quitReturnCommand",1,1)="literal"
    s array("quitReturnCommand",1,1,"value")="q"
    s array("quitReturnCommand",1,2)="literal"
    s array("quitReturnCommand",1,2,"value")="quit"
    s array("quitReturnCommand",2)="token"
    s array("quitReturnCommand",2,"value")="postcond"
    s array("quitReturnCommand",3)="token"
    s array("quitReturnCommand",3,"value")="SP"
    s array("quitReturnCommand",4)="options"
    s array("quitReturnCommand",4,1)="token"
    s array("quitReturnCommand",4,1,"value")="expr"
    s array("quitReturnCommand",4,2)="subtreeChain"
    s array("quitReturnCommand",4,2,1)="token"
    s array("quitReturnCommand",4,2,1,"value")="atSign"
    s array("quitReturnCommand",4,2,2)="token"
    s array("quitReturnCommand",4,2,2,"value")="expratom"
    ;
    s array("quitCommand")="subtreeChain"
    s array("quitCommand",1)="options"
    s array("quitCommand",1,"force")="forceToLowerCase"
    s array("quitCommand",1,1)="literal"
    s array("quitCommand",1,1,"value")="q"
    s array("quitCommand",1,2)="literal"
    s array("quitCommand",1,2,"value")="quit"
    s array("quitCommand",2)="token"
    s array("quitCommand",2,"value")="postcond"
    s array("quitCommand",3)="token"
    s array("quitCommand",3,"value")="SP"
    ;
    s array("readcount")="subtreeChain"
    s array("readcount",1)="token"
    s array("readcount",1,"value")="hash"
    s array("readcount",2)="token"
    s array("readcount",2,"value")="intexpr"
    ;
    s array("controlmnemonic")="subtreeChain"
    s array("controlmnemonic",1)="options"
    s array("controlmnemonic",1,1)="token"
    s array("controlmnemonic",1,1,"value")="questionMark"
    s array("controlmnemonic",1,2)="token"
    s array("controlmnemonic",1,2,"value")="ident"
    s array("controlmnemonic",2)="delimList"
    s array("controlmnemonic",2,"content")=""
    s array("controlmnemonic",2,"delimiter")="options"
    s array("controlmnemonic",2,"delimiter",1)="token"
    s array("controlmnemonic",2,"delimiter",1,"value")="ident"
    s array("controlmnemonic",2,"delimiter",2)="token"
    s array("controlmnemonic",2,"delimiter",2,"value")="digit"
    s array("controlmnemonic","force")="noStore"
    ;
    s array("format")="options"
    s array("format",1)="subtreeChain"
    s array("format",1,1)="delimList"
    s array("format",1,1,"delimiter")=""
    s array("format",1,1,"content")="options"
    s array("format",1,1,"content",1)="token"
    s array("format",1,1,"content",1,"value")="bang"
    s array("format",1,1,"content",2)="token"
    s array("format",1,1,"content",2,"value")="hash"
    s array("format",1,2)="options"
    s array("format",1,2,1)=""
    s array("format",1,2,2)="subtreeChain"
    s array("format",1,2,2,1)="token"
    s array("format",1,2,2,1,"value")="questionMark"
    s array("format",1,2,2,2)="token"
    s array("format",1,2,2,2,"value")="intexpr"
    s array("format",2)="subtreeChain"
    s array("format",2,1)="token"
    s array("format",2,1,"value")="questionMark"
    s array("format",2,2)="token"
    s array("format",2,2,"value")="intexpr"
    s array("format",3)="subtreeChain"
    s array("format",3,1)="token"
    s array("format",3,1,"value")="forwardSlash"
    s array("format",3,2)="token"
    s array("format",3,2,"value")="controlmnemonic"
    s array("format",3,3)="options"
    s array("format",3,3,1)=""
    s array("format",3,3,2)="subtreeChain"
    s array("format",3,3,2,1)="token"
    s array("format",3,3,2,1,"value")="openParen"
    s array("format",3,3,2,2)="delimList"
    s array("format",3,3,2,2,"content")="token"
    s array("format",3,3,2,2,"content","value")="expr"
    s array("format",3,3,2,2,"delimiter")="token"
    s array("format",3,3,2,2,"delimiter","value")="comma"
    s array("format",3,3,2,3)="token"
    s array("format",3,3,2,3,"value")="closeParen"
    ;
    s array("readargument")="options"
    s array("readargument",1)="token"
    s array("readargument",1,"value")="strlit"
    s array("readargument",2)="token"
    s array("readargument",2,"value")="format"
    s array("readargument",3)="subtreeChain"
    s array("readargument",3,1)="token"
    s array("readargument",3,1,"value")="glvn"
    s array("readargument",3,2)="options"
    s array("readargument",3,2,1)=""
    s array("readargument",3,2,2)="token"
    s array("readargument",3,2,2,"value")="readcount"
    s array("readargument",3,3)="options"
    s array("readargument",3,3,1)=""
    s array("readargument",3,3,2)="token"
    s array("readargument",3,3,2,"value")="timeout"
    s array("readargument",4)="subtreeChain"
    s array("readargument",4,1)="token"
    s array("readargument",4,1,"value")="asterisk"
    s array("readargument",4,2)="token"
    s array("readargument",4,2,"value")="glvn"
    s array("readargument",4,3)="options"
    s array("readargument",4,3,1)=""
    s array("readargument",4,3,2)="token"
    s array("readargument",4,3,2,"value")="timeout"
    s array("readargument",5)="subtreeChain"
    s array("readargument",5,1)="token"
    s array("readargument",5,1,"value")="atSign"
    s array("readargument",5,2)="token"
    s array("readargument",5,2,"value")="expratom"
    ;
    s array("readCommand")="subtreeChain"
    s array("readCommand",1)="options"
    s array("readCommand",1,"force")="forceToLowerCase"
    s array("readCommand",1,1)="literal"
    s array("readCommand",1,1,"value")="r"
    s array("readCommand",1,2)="literal"
    s array("readCommand",1,2,"value")="read"
    s array("readCommand",2)="token"
    s array("readCommand",2,"value")="postcond"
    s array("readCommand",3)="token"
    s array("readCommand",3,"value")="SP"
    s array("readCommand",4)="delimList"
    s array("readCommand",4,"delimiter")="token"
    s array("readCommand",4,"delimiter","value")="comma"
    s array("readCommand",4,"content")="token"
    s array("readCommand",4,"content","value")="readargument"
    ;
    s array("setev")="options"
    s array("setev","force")="forceToLowerCase"
    s array("setev",1)="options"
    s array("setev",1,1)="literal"
    s array("setev",1,1,"value")="$et"
    s array("setev",1,2)="literal"
    s array("setev",1,2,"value")="$etrap"
    s array("setev",2)="options"
    s array("setev",2,1)="literal"
    s array("setev",2,1,"value")="$ec"
    s array("setev",2,2)="literal"
    s array("setev",2,2,"value")="$ecode"
    ;
    s array("setextract")="subtreeChain"
    s array("setextract",1)="options"
    s array("setextract",1,"force")="forceToLowerCase"
    s array("setextract",1,1)="literal"
    s array("setextract",1,1,"value")="$e"
    s array("setextract",1,2)="literal"
    s array("setextract",1,2,"value")="$extract"
    s array("setextract",2)="token"
    s array("setextract",2,"value")="openParen"
    s array("setextract",3)="token"
    s array("setextract",3,"value")="glvn"
    s array("setextract",4)="options"
    s array("setextract",4,1)=""
    s array("setextract",4,2)="subtreeChain"
    s array("setextract",4,2,1)="token"
    s array("setextract",4,2,1,"value")="comma"
    s array("setextract",4,2,2)="token"
    s array("setextract",4,2,2,"value")="intexpr"
    s array("setextract",4,2,3)="options"
    s array("setextract",4,2,3,1)=""
    s array("setextract",4,2,3,2)="subtreeChain"
    s array("setextract",4,2,3,2,1)="token"
    s array("setextract",4,2,3,2,1,"value")="comma"
    s array("setextract",4,2,3,2,2)="token"
    s array("setextract",4,2,3,2,2,"value")="intexpr"
    s array("setextract",5)="token"
    s array("setextract",5,"value")="closeParen"
    ;
    s array("setpiece")="subtreeChain"
    s array("setpiece",1)="options"
    s array("setpiece",1,"force")="forceToLowerCase"
    s array("setpiece",1,1)="literal"
    s array("setpiece",1,1,"value")="$p"
    s array("setpiece",1,2)="literal"
    s array("setpiece",1,2,"value")="$piece"
    s array("setpiece",2)="token"
    s array("setpiece",2,"value")="openParen"
    s array("setpiece",3)="token"
    s array("setpiece",3,"value")="glvn"
    s array("setpiece",4)="token"
    s array("setpiece",4,"value")="comma"
    s array("setpiece",5)="token"
    s array("setpiece",5,"value")="expr"
    s array("setpiece",6)="options"
    s array("setpiece",6,1)=""
    s array("setpiece",6,2)="subtreeChain"
    s array("setpiece",6,2,1)="token"
    s array("setpiece",6,2,1,"value")="comma"
    s array("setpiece",6,2,2)="token"
    s array("setpiece",6,2,2,"value")="intexpr"
    s array("setpiece",6,2,3)="options"
    s array("setpiece",6,2,3,1)=""
    s array("setpiece",6,2,3,2)="subtreeChain"
    s array("setpiece",6,2,3,2,1)="token"
    s array("setpiece",6,2,3,2,1,"value")="comma"
    s array("setpiece",6,2,3,2,2)="token"
    s array("setpiece",6,2,3,2,2,"value")="intexpr"
    s array("setpiece",7)="token"
    s array("setpiece",7,"value")="closeParen"
    ;
    s array("leftexpr")="options"
    s array("leftexpr",1)="token"
    s array("leftexpr",1,"value")="setpiece"
    s array("leftexpr",2)="token"
    s array("leftexpr",2,"value")="setextract"
    s array("leftexpr",3)="token"
    s array("leftexpr",3,"value")="setev"
    ;
    s array("leftrestricted")="options"
    s array("leftrestricted","force")="forceToLowerCase"
    s array("leftrestricted",1)="literal"
    s array("leftrestricted",1,"value")="$x"
    s array("leftrestricted",2)="literal"
    s array("leftrestricted",2,"value")="$y"
    s array("leftrestricted",3)="options"
    s array("leftrestricted",3,1)="literal"
    s array("leftrestricted",3,1,"value")="$k"
    s array("leftrestricted",3,2)="literal"
    s array("leftrestricted",3,2,"value")="$key"
    s array("leftrestricted",4)="options"
    s array("leftrestricted",4,1)="literal"
    s array("leftrestricted",4,1,"value")="$d"
    s array("leftrestricted",4,2)="literal"
    s array("leftrestricted",4,2,"value")="$device"
    ;
    s array("setleft")="options"
    s array("setleft",1)="token"
    s array("setleft",1,"value")="leftrestricted"
    s array("setleft",2)="token"
    s array("setleft",2,"value")="leftexpr"
    s array("setleft",3)="token"
    s array("setleft",3,"value")="glvn"
    ;
    s array("setdestination")="options"
    s array("setdestination",1)="token"
    s array("setdestination",1,"value")="setleft"
    s array("setdestination",2)="subtreeChain"
    s array("setdestination",2,1)="token"
    s array("setdestination",2,1,"value")="openParen"
    s array("setdestination",2,2)="delimList"
    s array("setdestination",2,2,"content")="token"
    s array("setdestination",2,2,"content","value")="setleft"
    s array("setdestination",2,2,"delimiter")="token"
    s array("setdestination",2,2,"delimiter","value")="comma"
    s array("setdestination",2,3)="token"
    s array("setdestination",2,3,"value")="closeParen"
    ;
    s array("exprSetArgument")="token"
    s array("exprSetArgument","value")="expratom" ; This must evaluate to a setargument
    ;
    s array("setargument")="options"
    s array("setargument",1)="subtreeChain"
    s array("setargument",1,1)="token"
    s array("setargument",1,1,"value")="setdestination"
    s array("setargument",1,2)="token"
    s array("setargument",1,2,"value")="equals"
    s array("setargument",1,3)="token"
    s array("setargument",1,3,"value")="expr"
    s array("setargument",2)="subtreeChain"
    s array("setargument",2,1)="token"
    s array("setargument",2,1,"value")="atSign"
    s array("setargument",2,2)="token"
    s array("setargument",2,2,"value")="exprSetArgument" 
    ;
    s array("setCommand")="subtreeChain"
    s array("setCommand",1)="options"
    s array("setCommand",1,"force")="forceToLowerCase"
    s array("setCommand",1,1)="literal"
    s array("setCommand",1,1,"value")="s"
    s array("setCommand",1,2)="literal"
    s array("setCommand",1,2,"value")="set"
    s array("setCommand",2)="token"
    s array("setCommand",2,"value")="postcond"
    s array("setCommand",3)="token"
    s array("setCommand",3,"value")="SP"
    s array("setCommand",4)="delimList"
    s array("setCommand",4,"delimiter")="token"
    s array("setCommand",4,"delimiter","value")="comma"
    s array("setCommand",4,"content")="token"
    s array("setCommand",4,"content","value")="setargument"
    ;
    s array("tcommitCommand")="subtreeChain"
    s array("tcommitCommand",1)="options"
    s array("tcommitCommand",1,"force")="forceToLowerCase"
    s array("tcommitCommand",1,1)="literal"
    s array("tcommitCommand",1,1,"value")="tc"
    s array("tcommitCommand",1,2)="literal"
    s array("tcommitCommand",1,2,"value")="tcommit"
    s array("tcommitCommand",2)="token"
    s array("tcommitCommand",2,"value")="postcond"
    s array("tcommitCommand",3)="token"
    s array("tcommitCommand",3,"value")="SP"
    ;
    s array("trestartCommand")="subtreeChain"
    s array("trestartCommand",1)="options"
    s array("trestartCommand",1,"force")="forceToLowerCase"
    s array("trestartCommand",1,1)="literal"
    s array("trestartCommand",1,1,"value")="tre"
    s array("trestartCommand",1,2)="literal"
    s array("trestartCommand",1,2,"value")="trestart"
    s array("trestartCommand",2)="token"
    s array("trestartCommand",2,"value")="postcond"
    s array("trestartCommand",3)="token"
    s array("trestartCommand",3,"value")="SP"
    ;
    s array("trollbackCommand")="subtreeChain"
    s array("trollbackCommand",1)="options"
    s array("trollbackCommand",1,"force")="forceToLowerCase"
    s array("trollbackCommand",1,1)="literal"
    s array("trollbackCommand",1,1,"value")="tro"
    s array("trollbackCommand",1,2)="literal"
    s array("trollbackCommand",1,2,"value")="trollback"
    s array("trollbackCommand",2)="token"
    s array("trollbackCommand",2,"value")="postcond"
    s array("trollbackCommand",3)="token"
    s array("trollbackCommand",3,"value")="SP"
    ;
    s array("tstartkeyword")="options"
    s array("tstartkeyword",1)="options"
    s array("tstartkeyword",1,"force")="forceToLowerCase"
    s array("tstartkeyword",1,1)="literal"
    s array("tstartkeyword",1,1,"value")="s"
    s array("tstartkeyword",1,2)="literal"
    s array("tstartkeyword",1,2,"value")="serial"
    s array("tstartkeyword",2)="subtreeChain"
    s array("tstartkeyword",2,1)="options"
    s array("tstartkeyword",2,1,"force")="forceToLowerCase"
    s array("tstartkeyword",2,1,1)="literal"
    s array("tstartkeyword",2,1,1,"value")="t"
    s array("tstartkeyword",2,1,2)="literal"
    s array("tstartkeyword",2,1,2,"value")="transactionid"
    s array("tstartkeyword",2,2)="token"
    s array("tstartkeyword",2,2,"value")="equals"
    s array("tstartkeyword",2,3)="token"
    s array("tstartkeyword",2,3,"value")="expr"
    ;
    s array("tsparam")="token"
    s array("tsparam","value")="tstartkeyword"
    ;
    s array("transparameters")="options"
    s array("transparameters",1)="token"
    s array("transparameters",1,"value")="tsparam"
    s array("transparameters",2)="subtreeChain"
    s array("transparameters",2,1)="token"
    s array("transparameters",2,1,"value")="openParen"
    s array("transparameters",2,2)="delimList"
    s array("transparameters",2,2,"content")="token"
    s array("transparameters",2,2,"content","value")="tsparam"
    s array("transparameters",2,2,"delimiter")="token"
    s array("transparameters",2,2,"delimiter","value")="colon"
    s array("transparameters",2,3)="token"
    s array("transparameters",2,3,"value")="closeParen"
    ;
    s array("restartargument")="options"
    s array("restartargument",1)="token"
    s array("restartargument",1,"value")="lname"
    s array("restartargument",2)="token"
    s array("restartargument",2,"value")="asterisk"
    s array("restartargument",3)="subtreeChain"
    s array("restartargument",3,1)="token"
    s array("restartargument",3,1,"value")="openParen"
    s array("restartargument",3,2)="token"
    s array("restartargument",3,2,"value")="closeParen"
    s array("restartargument",4)="subtreeChain"
    s array("restartargument",4,1)="token"
    s array("restartargument",4,1,"value")="openParen"
    s array("restartargument",4,2)="delimList"
    s array("restartargument",4,2,"content")="token"
    s array("restartargument",4,2,"content","value")="lname"
    s array("restartargument",4,2,"delimiter")="token"
    s array("restartargument",4,2,"delimiter","value")="comma"
    s array("restartargument",4,3)="token"
    s array("restartargument",4,3,"value")="closeParen"
    ;
    s array("tstartargument")="subtreeChain"
    s array("tstartargument",1)="options"
    s array("tstartargument",1,1)=""
    s array("tstartargument",1,2)="token"
    s array("tstartargument",1,2,"value")="restartargument"
    s array("tstartargument",2)="options"
    s array("tstartargument",2,1)=""
    s array("tstartargument",2,2)="subtreeChain"
    s array("tstartargument",2,2,1)="token"
    s array("tstartargument",2,2,1,"value")="colon"
    s array("tstartargument",2,2,2)="token"
    s array("tstartargument",2,2,2,"value")="transparameters"
    ;
    s array("tstartCommand")="subtreeChain"
    s array("tstartCommand",1)="options"
    s array("tstartCommand",1,"force")="forceToLowerCase"
    s array("tstartCommand",1,1)="literal"
    s array("tstartCommand",1,1,"value")="ts"
    s array("tstartCommand",1,2)="literal"
    s array("tstartCommand",1,2,"value")="tstart"
    s array("tstartCommand",2)="token"
    s array("tstartCommand",2,"value")="postcond"
    s array("tstartCommand",3)="token"
    s array("tstartCommand",3,"value")="SP"
    s array("tstartCommand",4)="options"
    s array("tstartCommand",4,1)=""
    s array("tstartCommand",4,2)="delimList"
    s array("tstartCommand",4,2,"delimiter")="token"
    s array("tstartCommand",4,2,"delimiter","value")="comma"
    s array("tstartCommand",4,2,"content")="token"
    s array("tstartCommand",4,2,"content","value")="tstartargument"
    s array("tstartCommand",4,3)="subtreeChain"
    s array("tstartCommand",4,3,1)="token"
    s array("tstartCommand",4,3,1,"value")="atSign"
    s array("tstartCommand",4,3,2)="token"
    s array("tstartCommand",4,3,2,"value")="expratom"
    ;
    s array("useargument")="options"
    s array("useargument",1)="subtreeChain"
    s array("useargument",1,1)="token"
    s array("useargument",1,1,"value")="atSign"
    s array("useargument",1,2)="token"
    s array("useargument",1,2,"value")="expratom"
    s array("useargument",2)="subtreeChain"
    s array("useargument",2,1)="token"
    s array("useargument",2,1,"value")="expr"
    s array("useargument",2,2)="options"
    s array("useargument",2,2,1)=""
    s array("useargument",2,2,2)="subtreeChain"
    s array("useargument",2,2,2,1)="token"
    s array("useargument",2,2,2,1,"value")="colon"
    s array("useargument",2,2,2,2)="token"
    s array("useargument",2,2,2,2,"value")="deviceParameters"
    s array("useargument",2,2,3)="subtreeChain"
    s array("useargument",2,2,3,1)="token"
    s array("useargument",2,2,3,1,"value")="colon"
    s array("useargument",2,2,3,2)="options"
    s array("useargument",2,2,3,2,1)=""
    s array("useargument",2,2,3,2,2)="token"
    s array("useargument",2,2,3,2,2,"value")="deviceParameters"
    s array("useargument",2,2,3,3)="token"
    s array("useargument",2,2,3,3,"value")="colon"
    s array("useargument",2,2,3,4)="token"
    s array("useargument",2,2,3,4,"value")="mnemonicspace"
    ;
    s array("useCommand")="subtreeChain"
    s array("useCommand",1)="options"
    s array("useCommand",1,"force")="forceToLowerCase"
    s array("useCommand",1,1)="literal"
    s array("useCommand",1,1,"value")="u"
    s array("useCommand",1,2)="literal"
    s array("useCommand",1,2,"value")="use"
    s array("useCommand",2)="token"
    s array("useCommand",2,"value")="postcond"
    s array("useCommand",3)="token"
    s array("useCommand",3,"value")="SP"
    s array("useCommand",4)="delimList"
    s array("useCommand",4,"delimiter")="token"
    s array("useCommand",4,"delimiter","value")="comma"
    s array("useCommand",4,"content")="token"
    s array("useCommand",4,"content","value")="useargument"
    ;
    s array("viewCommand")="subtreeChain"
    s array("viewCommand",1)="options"
    s array("viewCommand",1,"force")="forceToLowerCase"
    s array("viewCommand",1,1)="literal"
    s array("viewCommand",1,1,"value")="v"
    s array("viewCommand",1,2)="literal"
    s array("viewCommand",1,2,"value")="view"
    s array("viewCommand",2)="token"
    s array("viewCommand",2,"value")="postcond"
    s array("viewCommand",3)="token"
    s array("viewCommand",3,"value")="SP"
    s array("viewCommand",3)="token"
    s array("viewCommand",3,"value")="SP"
    s array("viewCommand",4)="token" ; This is unspecified in the MUMPS standard
    s array("viewCommand",4,"value")="expr"
    ;
    s array("writeargument")="options"
    s array("writeargument",1)="token"
    s array("writeargument",1,"value")="format"
    s array("writeargument",2)="token"
    s array("writeargument",2,"value")="expr"
    s array("writeargument",3)="subtreeChain"
    s array("writeargument",3,1)="token"
    s array("writeargument",3,1,"value")="asterisk"
    s array("writeargument",3,2)="token"
    s array("writeargument",3,2,"value")="intexpr"
    s array("writeargument",4)="subtreeChain"
    s array("writeargument",4,1)="token"
    s array("writeargument",4,1,"value")="atSign"
    s array("writeargument",4,2)="token"
    s array("writeargument",4,2,"value")="expratom"
    ;
    s array("writeCommand")="subtreeChain"
    s array("writeCommand",1)="options"
    s array("writeCommand",1,"force")="forceToLowerCase"
    s array("writeCommand",1,1)="literal"
    s array("writeCommand",1,1,"value")="w"
    s array("writeCommand",1,2)="literal"
    s array("writeCommand",1,2,"value")="write"
    s array("writeCommand",2)="token"
    s array("writeCommand",2,"value")="postcond"
    s array("writeCommand",3)="token"
    s array("writeCommand",3,"value")="SP"
    s array("writeCommand",4)="delimList"
    s array("writeCommand",4,"delimiter")="token"
    s array("writeCommand",4,"delimiter","value")="comma"
    s array("writeCommand",4,"content")="token"
    s array("writeCommand",4,"content","value")="writeargument"
    ;
    s array("xargument")="options"
    s array("xargument",1)="subtreeChain"
    s array("xargument",1,1)="token"
    s array("xargument",1,1,"value")="expr"
    s array("xargument",1,2)="token"
    s array("xargument",1,2,"value")="postcond"
    s array("xargument",2)="subtreeChain"
    s array("xargument",2,1)="token"
    s array("xargument",2,1,"value")="atSign"
    s array("xargument",2,2)="token"
    s array("xargument",2,2,"value")="expratom" 
    ;
    s array("xecuteCommand")="subtreeChain"
    s array("xecuteCommand",1)="options"
    s array("xecuteCommand",1,"force")="forceToLowerCase"
    s array("xecuteCommand",1,1)="literal"
    s array("xecuteCommand",1,1,"value")="x"
    s array("xecuteCommand",1,2)="literal"
    s array("xecuteCommand",1,2,"value")="xecute"
    s array("xecuteCommand",2)="token"
    s array("xecuteCommand",2,"value")="postcond"
    s array("xecuteCommand",3)="token"
    s array("xecuteCommand",3,"value")="SP"
    s array("xecuteCommand",4)="delimList"
    s array("xecuteCommand",4,"delimiter")="token"
    s array("xecuteCommand",4,"delimiter","value")="comma"
    s array("xecuteCommand",4,"content")="token"
    s array("xecuteCommand",4,"content","value")="xargument"
    ;
    s array("command")="options"
    s array("command",1)="token"
    s array("command",1,"value")="breakCommand"
    s array("command",2)="token"
    s array("command",2,"value")="breakToggleCommand"
    s array("command",3)="token"
    s array("command",3,"value")="closeCommand"
    s array("command",4)="token"
    s array("command",4,"value")="doCommand"
    s array("command",5)="token"
    s array("command",5,"value")="doNextCommand"
    s array("command",6)="token"
    s array("command",6,"value")="elseCommand" 
    s array("command",7)="token"
    s array("command",7,"value")="forCommand"
    s array("command",8)="token"
    s array("command",8,"value")="foreverCommand"
    s array("command",9)="token"
    s array("command",9,"value")="gotoCommand" 
    s array("command",10)="token"
    s array("command",10,"value")="haltCommand" 
    s array("command",11)="token"
    s array("command",11,"value")="hangCommand"
    s array("command",12)="token"
    s array("command",12,"value")="ifCommand"
    s array("command",13)="token"
    s array("command",13,"value")="jobCommand"
    s array("command",14)="token"
    s array("command",14,"value")="killCommand"
    s array("command",15)="token"
    s array("command",15,"value")="killallCommand"
    s array("command",16)="token"
    s array("command",16,"value")="lockCommand"
    s array("command",17)="token"
    s array("command",17,"value")="lockNoneCommand"
    s array("command",18)="token"
    s array("command",18,"value")="mergeCommand"
    s array("command",19)="token"
    s array("command",19,"value")="newCommand"
    s array("command",20)="token"
    s array("command",20,"value")="newAllCommand"
    s array("command",21)="token"
    s array("command",21,"value")="openCommand"
    s array("command",22)="token"
    s array("command",22,"value")="quitCommand"
    s array("command",23)="token"
    s array("command",23,"value")="quitReturnCommand"
    s array("command",24)="token"
    s array("command",24,"value")="readCommand"
    s array("command",25)="token"
    s array("command",25,"value")="setCommand"
    s array("command",26)="token"
    s array("command",26,"value")="tcommitCommand"
    s array("command",27)="token"
    s array("command",27,"value")="trestartCommand"
    s array("command",28)="token"
    s array("command",28,"value")="trollbackCommand"
    s array("command",29)="token"
    s array("command",29,"value")="tstartCommand"
    s array("command",30)="token"
    s array("command",30,"value")="useCommand"
    s array("command",31)="token"
    s array("command",31,"value")="viewCommand"
    s array("command",32)="token"
    s array("command",32,"value")="writeCommand"
    s array("command",33)="token"
    s array("command",33,"value")="xecuteCommand"
    ;
    q 1
    ;
    ;
    ; This loads the multicharacter components of the grammar
loadRoutineStructure(array)
    s array("name")="subtreeChain"
    s array("name","force")="noStore"
    s array("name",1)="options"
    s array("name",1,1)="token"
    s array("name",1,1,"value")="percent"
    s array("name",1,2)="token"
    s array("name",1,2,"value")="ident"
    s array("name",2)="delimList"
    s array("name",2,"content")=""
    s array("name",2,"delimiter")="options"
    s array("name",2,"delimiter",1)="token"
    s array("name",2,"delimiter",1,"value")="digit"
    s array("name",2,"delimiter",2)="token"
    s array("name",2,"delimiter",2,"value")="ident"
    ;
    s array("routinename")="token"
    s array("routinename","value")="name"
    s array("routinename","force")="noStore"
    ;
    s array("routineref")="options"
    s array("routineref",1)="subtreeChain"
    s array("routineref",1,1)="token"
    s array("routineref",1,1,"value")="atSign"
    s array("routineref",1,2)="token"
    s array("routineref",1,2,"value")="expratom"
    s array("routineref",2)="subtreeChain"
    s array("routineref",2,1)="options"
    s array("routineref",2,1,1)=""
    s array("routineref",2,1,2)="subtreeChain"
    s array("routineref",2,1,2,1)="token"
    s array("routineref",2,1,2,1,"value")="pipe"
    s array("routineref",2,1,2,2)="token"
    s array("routineref",2,1,2,2,"value")="environment"
    s array("routineref",2,1,2,3)="token"
    s array("routineref",2,1,2,3,"value")="pipe"
    s array("routineref",2,2)="token"
    s array("routineref",2,2,"value")="routinename"
    ;
    s array("entryref")="options"
    s array("entryref",1)="subtreeChain"
    s array("entryref",1,1)="token"
    s array("entryref",1,1,"value")="caret"
    s array("entryref",1,2)="token"
    s array("entryref",1,2,"value")="routineref"
    s array("entryref",2)="subtreeChain"
    s array("entryref",2,1)="token"
    s array("entryref",2,1,"value")="dlabel"
    s array("entryref",2,2)="options"
    s array("entryref",2,2,1)=""
    s array("entryref",2,2,2)="subtreeChain"
    s array("entryref",2,2,2,1)="token"
    s array("entryref",2,2,2,1,"value")="plus"
    s array("entryref",2,2,2,2)="token"
    s array("entryref",2,2,2,2,"value")="intexpr"
    s array("entryref",2,3)="options"
    s array("entryref",2,3,1)=""
    s array("entryref",2,3,2)="subtreeChain"
    s array("entryref",2,3,2,1)="token"
    s array("entryref",2,3,2,1,"value")="caret"
    s array("entryref",2,3,2,2)="token"
    s array("entryref",2,3,2,2,"value")="routineref"
    ;
    s array("dlabel")="options"
    s array("dlabel",1)="token"
    s array("dlabel",1,"value")="label"
    s array("dlabel",2)="subtreeChain"
    s array("dlabel",2,1)="token"
    s array("dlabel",2,1,"value")="atSign"
    s array("dlabel",2,2)="token"
    s array("dlabel",2,2,"value")="expratom"    
    ;
    s array("routinehead")="subtreeChain"
    s array("routinehead",1)="token"
    s array("routinehead",1,"value")="routinename"
    s array("routinehead",2)="token"
    s array("routinehead",2,"value")="eol"
    ;
    s array("commands")="delimList"
    s array("commands","content")="token"
    s array("commands","content","value")="command"
    s array("commands","delimiter")="token"
    s array("commands","delimiter","value")="spaces"
    ;
    s array("extid")="options"
    s array("extid",1)=""
    s array("extid",2)="literal"
    s array("extid",2,"value")="SQL"
    ;
    s array("exttext")="subtreeChain"
    s array("exttext",1)="delimList"
    s array("exttext",1,"content")=""
    s array("exttext",1,"delimiter")="token"
    s array("exttext",1,"delimiter","value")="graphic"
    s array("exttext",2)="delimList"
    s array("exttext",2,"content")=""
    s array("exttext",2,"delimiter")="subtreeChain"
    s array("exttext",2,"delimiter",1)="token"
    s array("exttext",2,"delimiter",1,"value")="eol"
    s array("exttext",2,"delimiter",2)="token"
    s array("exttext",2,"delimiter",2,"value")="ampersand"
    s array("exttext",2,"delimiter",3)="token"
    s array("exttext",2,"delimiter",3,"value")="ls"
    s array("exttext",2,"delimiter",4)="delimList"
    s array("exttext",2,"delimiter",4,"content")=""
    s array("exttext",2,"delimiter",4,"delimiter")="graphic"
    ;
    s array("extsyntax")="subtreeChain"
    s array("extsyntax",1)="token"
    s array("extsyntax",1,"value")="ampersand"
    s array("extsyntax",2)="token"
    s array("extsyntax",2,"value")="extid"
    s array("extsyntax",3)="token"
    s array("extsyntax",3,"value")="openParen"
    s array("extsyntax",4)="token"
    s array("extsyntax",4,"value")="exttext"
    s array("extsyntax",5)="token"
    s array("extsyntax",5,"value")="closeParen"
    ;
    s array("comment")="subtreeChain"
    s array("comment",1)="token"
    s array("comment",1,"value")="semicolon"
    s array("comment",2)="delimList"
    s array("comment",2,"content")=""
    s array("comment",2,"delimiter")="token"
    s array("comment",2,"delimiter","value")="graphic"
    s array("comment","force")="noStore"
    ;
    s array("linebody")="subtreeChain"
    s array("linebody",1)="options"
    s array("linebody",1,1)="subtreeChain"
    s array("linebody",1,1,1)="token"
    s array("linebody",1,1,1,"value")="commands"
    s array("linebody",1,1,2)="options"
    s array("linebody",1,1,2,1)=""
    s array("linebody",1,1,2,2)="subtreeChain"
    s array("linebody",1,1,2,2,1)="token"
    s array("linebody",1,1,2,2,1,"value")="spaces"
    s array("linebody",1,1,2,2,2)="token"
    s array("linebody",1,1,2,2,2,"value")="comment"
    s array("linebody",1,2)="subtreeChain"
    s array("linebody",1,2,1)="options"
    s array("linebody",1,2,1,1)=""
    s array("linebody",1,2,1,2)="subtreeChain"
    s array("linebody",1,2,1,2,1)="token"
    s array("linebody",1,2,1,2,1,"value")="commands"
    s array("linebody",1,2,1,2,2)="token"
    s array("linebody",1,2,1,2,2,"value")="spaces"
    s array("linebody",1,2,2)="token"
    s array("linebody",1,2,2,"value")="extsyntax"
    s array("linebody",1,3)="token"
    s array("linebody",1,3,"value")="comment"
    s array("linebody",2)="token"
    s array("linebody",2,"value")="eol"
    ;
    s array("ls")="delimList"
    s array("ls","content")="token"
    s array("ls","content","value")="SP"
    s array("ls","delimiter")=""
    ;
    s array("li")="subtreeChain"
    s array("li",1)="token"
    s array("li",1,"value")="period"
    s array("li",2)="delimList"
    s array("li",2,"content")=""
    s array("li",2,"delimiter")="token"
    s array("li",2,"delimiter","value")="SP"
    ;
    s array("label")="options"
    s array("label",1)="token"
    s array("label",1,"value")="name"
    s array("label",2)="token"
    s array("label",2,"value")="intlit"
    s array("label","force")="noStore"
    ;
    s array("levelline")="subtreeChain"
    s array("levelline",1)="options"
    s array("levelline",1,1)=""
    s array("levelline",1,2)="token"
    s array("levelline",1,2,"value")="label"
    s array("levelline",2)="token"
    s array("levelline",2,"value")="ls"
    s array("levelline",3)="options"
    s array("levelline",3,1)=""
    s array("levelline",3,2)="delimList"
    s array("levelline",3,2,"content")=""
    s array("levelline",3,2,"delimiter")="token"
    s array("levelline",3,2,"delimiter","value")="li"
    s array("levelline",4)="token"
    s array("levelline",4,"value")="linebody"
    ;
    s array("formallist")="subtreeChain"
    s array("formallist",1)="token"
    s array("formallist",1,"value")="openParen"
    s array("formallist",2)="options"
    s array("formallist",2,1)=""
    s array("formallist",2,2)="delimList"
    s array("formallist",2,2,"content")="token"
    s array("formallist",2,2,"content","value")="name"
    s array("formallist",2,2,"delimiter")="token"
    s array("formallist",2,2,"delimiter","value")="comma"
    s array("formallist",3)="token"
    s array("formallist",3,"value")="closeParen"
    ;
    s array("formalline")="subtreeChain"
    s array("formalline",1)="token"
    s array("formalline",1,"value")="label"
    s array("formalline",2)="token"
    s array("formalline",2,"value")="formallist"
    s array("formalline",3)="token"
    s array("formalline",3,"value")="ls"
    s array("formalline",4)="token"
    s array("formalline",4,"value")="linebody"
    ;
    s array("line")="options"
    s array("line",1)="token"
    s array("line",1,"value")="levelline"
    s array("line",2)="token"
    s array("line",2,"value")="formalline"
    ;
    s array("routinebody")="subtreeChain"
    s array("routinebody",1)="delimList"
    s array("routinebody",1,"content")="token"
    s array("routinebody",1,"content","value")="line"
    s array("routinebody",1,"delimiter")=""
    s array("routinebody",2)="token"
    s array("routinebody",2,"value")="eor"
    ;
    s array("routine")="subtreeChain"
    s array("routine",1)="token"
    s array("routine",1,"value")="routinehead"
    s array("routine",2)="token"
    s array("routine",2,"value")="routinebody"
    ;
    q 1
    ;
    ;
loadAll(array)
    s array("expratom")="" ; for testing purposes
    s %=$$loadChars(.array)
    s %=$$loadStrings(.array)
    s %=$$loadNumbers(.array)
    s %=$$loadPatterns(.array)
    s %=$$loadCommands(.array)
    s %=$$loadVariables(.array)
    s %=$$loadFunctions(.array)
    s %=$$loadExpressions(.array)
    s %=$$loadRoutineStructure(.array)
    q 1
    ;
    ;
tester()
    n grammar
    s %=$$loadAll(.grammar)
    ; zwrite grammar
    ;
    ;n outList
    ;w $$hasLeftRecursiveReferences^PARSER3("grammar",.outList),!
    ;d showParseTree^PARSER1("outList")
    ;
    ;k outTree
    ;s codeToParse="w ""foo"""_$c(13,10)
    ;w !,$$parseToken^PARSER1("linebody","outTree","grammar","codeToParse",1),!
    ;d showParseTree^PARSER1("outTree")
    ;
    k outTree
    s codeToParse="m foo=florp ; this is a comment"_$c(13,10)
    w !,$$parseToken^PARSER1("linebody","outTree","grammar","codeToParse",1),!
    d showParseTree^PARSER1("outTree")
    ;
    ;k outTree
    ;s codeToParse="402.20"
    ;w !,$$parseToken^PARSER1("numlit","outTree","grammar","codeToParse",1),!
    ;d showParseTree^PARSER1("outTree")
    ;
    n codeToParse,outTree,index,result
    ;s codeToParse(1+$o(codeToParse(""),-1))="w:foo #!!!,?4,""Hello world"""
    ;s codeToParse(1+$o(codeToParse(""),-1))="w /cup(2,4)"
    s codeToParse(1+$o(codeToParse(""),-1))="s $ec="""",x=4,fop=12"
    ;s codeToParse(1+$o(codeToParse(""),-1))="s ^(foo,2)=""feep"",@fop=12"
    ;s codeToParse(1+$o(codeToParse(""),-1))="s @@@foo@(feep)=$$florp()"
    s codeToParse(1+$o(codeToParse(""),-1))="i 7,8,$$fun^stuff() s foo=1"
    s codeToParse(1+$o(codeToParse(""),-1))="m foo=florp ; this is a comment"
    s codeToParse(1+$o(codeToParse(""),-1))="m:1'=2 foo=florp"
    s codeToParse(1+$o(codeToParse(""),-1))="WRITE @""#"""
    ;s codeToParse(1+$o(codeToParse(""),-1))="i $$foo(1,2,$$three())=four+5 w ""six"""
    s codeToParse(1+$o(codeToParse(""),-1))="n a,b,(c,d)"
    s codeToParse(1+$o(codeToParse(""),-1))="k a,^b,(c,d) n  "
    s codeToParse(1+$o(codeToParse(""),-1))="g tag1:foo'=feep,tag2:'(foo'=1),tag3"
    ;
    f  s index=$o(codeToParse($g(index))) q:index=""  d
    . k outTree
    . s result=$$parseToken^PARSER1("commands","outTree","grammar","codeToParse("_index_")",1)
    . i result<0 w !,result,!
    . e  w !,codeToParse(index),!,?result,"^",!
    . d showParseTree^PARSER1("outTree")
    ;
    q
